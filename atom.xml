<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JEFT</title>
  
  <subtitle>学习是苦根上长出来的甜果</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-24T20:17:51.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JEFT-hai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>build</title>
    <link href="http://yoursite.com/2018/03/24/build/"/>
    <id>http://yoursite.com/2018/03/24/build/</id>
    <published>2018-03-24T15:58:12.000Z</published>
    <updated>2018-03-24T20:17:51.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一下上线过程"><a href="#记录一下上线过程" class="headerlink" title="记录一下上线过程"></a>记录一下上线过程</h3><h4 id="pm2-gt-维持命令行关闭但是server不关闭"><a href="#pm2-gt-维持命令行关闭但是server不关闭" class="headerlink" title="pm2 =&gt; 维持命令行关闭但是server不关闭"></a>pm2 =&gt; 维持命令行关闭但是server不关闭</h4><p>启动 pm2 start …<br>关闭 pm2 stop …<br>查看项目 pm2 list </p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="放在server下的views下"><a href="#放在server下的views下" class="headerlink" title="放在server下的views下"></a>放在server下的views下</h5><p> app.js中<br> var ejs = require(‘ejs’); //并下载ejs<br> // view engine setup<br> app.set(‘views’, path.join(<strong>dirname, ‘views’));<br> app.engine(‘.html’,ejs.</strong>express);<br> app.set(‘view engine’, ‘html’);</p><p>这时就能访问 服务器:server端口号 =&gt; 就是views中html页面</p><h5 id="html不放在server中-eg-nginx的html下"><a href="#html不放在server中-eg-nginx的html下" class="headerlink" title="html不放在server中(eg:nginx的html下)"></a>html不放在server中(eg:nginx的html下)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name imooc.minghai.shop;</div><div class="line">        <span class="comment"># root /usr/local/nginx/html/imooc;</span></div><div class="line">        <span class="comment"># index login.html index.html;</span></div><div class="line"></div><div class="line">       <span class="comment"># if ($host ~ ^(m|game|admin|imooc)\.minghai\.shop$)</span></div><div class="line">       <span class="comment"># &#123;</span></div><div class="line">        <span class="comment">#     set $erji $1;</span></div><div class="line">         <span class="comment">#    rewrite ^(.*)$ /$erji$1 last;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line">        location / &#123;</div><div class="line">            root /usr/<span class="built_in">local</span>/nginx/html/imooc;  html地址</div><div class="line">            index index.html;</div><div class="line">或</div><div class="line">            proxy_pass http://127.0.0.1:3000/ html放入server下</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /imooc/users/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/users/;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        location /users/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/users/;</div><div class="line">        &#125;</div><div class="line">        location /cart/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/cart/;</div><div class="line">        &#125;</div><div class="line">        location /goods/list &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/goods/list;</div><div class="line">        &#125;        </div><div class="line">        location /goods/addCart &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/goods/addCart;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;记录一下上线过程&quot;&gt;&lt;a href=&quot;#记录一下上线过程&quot; class=&quot;headerlink&quot; title=&quot;记录一下上线过程&quot;&gt;&lt;/a&gt;记录一下上线过程&lt;/h3&gt;&lt;h4 id=&quot;pm2-gt-维持命令行关闭但是server不关闭&quot;&gt;&lt;a href=&quot;#pm2-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ie</title>
    <link href="http://yoursite.com/2018/03/21/ie/"/>
    <id>http://yoursite.com/2018/03/21/ie/</id>
    <published>2018-03-20T16:00:43.000Z</published>
    <updated>2018-03-22T12:28:12.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结一下ie兼容性问题"><a href="#总结一下ie兼容性问题" class="headerlink" title="总结一下ie兼容性问题"></a>总结一下ie兼容性问题</h3><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ol><li>ie9及以下 a标签下的img会有黑色边框 =&gt; a img{border:0px;}</li><li>a标签 点击后有 虚框 a{outline:none;}</li><li>transform 要加啊前缀-ms-transform js=&gt;msTransfrom</li><li>input radio 在ie下样式难看，不和chrome一样，可以用lable方法写样式将input隐藏<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.select-type label&#123;</div><div class="line">position: relative;</div><div class="line">display: inline-block;</div><div class="line">padding-left: 20px;</div><div class="line">line-height: 20px;</div><div class="line">&#125;</div><div class="line">.select-type label:before&#123;</div><div class="line">position: absolute;</div><div class="line">content: <span class="string">''</span>;</div><div class="line">height: 14px;</div><div class="line">width: 14px;</div><div class="line">border-radius: 50%;</div><div class="line">border:1px solid <span class="comment">#666;</span></div><div class="line">box-sizing: border-box;</div><div class="line">background-color: <span class="comment">#dedede;</span></div><div class="line">left:0;</div><div class="line">top:3px;</div><div class="line">&#125;</div><div class="line">.select-type input:checked+label:after &#123;</div><div class="line">position: absolute;</div><div class="line">content: <span class="string">''</span>;</div><div class="line">width: 8px;</div><div class="line">height: 8px;</div><div class="line">background: <span class="comment">#666;</span></div><div class="line">border-radius: 50%;</div><div class="line">left: 3px;</div><div class="line">top:6px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"select-type"</span>&gt;</div><div class="line">&lt;input id=<span class="string">"gnjp_single_trip"</span> name=<span class="string">"flighttype"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> checked autocomplete=<span class="string">"off"</span>&gt;</div><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">"gnjp_single_trip"</span>&gt;&lt;span&gt;单程&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;input id=<span class="string">"gnjp_round_trip"</span> name=<span class="string">"flighttype"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> autocomplete=<span class="string">"off"</span>&gt;</div><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">"gnjp_round_trip"</span>&gt;&lt;span&gt;往返&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><ol><li><p>toTop document.documentElement.scrollTop = document.body.scrollTop = 0;</p></li><li><p>事件绑定 attachEvent addEventListener</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="built_in">bind</span>(elem,<span class="built_in">type</span>,fn)&#123;</div><div class="line"><span class="keyword">if</span>(elem.addEventListener)&#123;</div><div class="line">elem.addEventListener(<span class="built_in">type</span>,fn,<span class="literal">false</span>)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">elem.attachEvent(<span class="string">'on'</span>+<span class="built_in">type</span>,fn)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>ie9及以下不支持 classList</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!(<span class="string">"classList"</span> <span class="keyword">in</span> document.documentElement)) &#123;  </div><div class="line">    Object.defineProperty(HTMLElement.prototype, <span class="string">'classList'</span>, &#123;  </div><div class="line">        get: <span class="function"><span class="title">function</span></span>() &#123;  </div><div class="line">            var self = this;  </div><div class="line">            <span class="keyword">function</span> update(fn) &#123;  </div><div class="line">                <span class="built_in">return</span> <span class="keyword">function</span>(value) &#123;  </div><div class="line">                    var classes = self.className.split(/\s+/g),  </div><div class="line">                        index = classes.indexOf(value);  </div><div class="line">                      </div><div class="line">                    fn(classes, index, value);  </div><div class="line">                    self.className = classes.join(<span class="string">" "</span>);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">              </div><div class="line">            <span class="built_in">return</span> &#123;                      </div><div class="line">                add: update(<span class="keyword">function</span>(classes, index, value) &#123;  </div><div class="line">                    <span class="keyword">if</span> (!~index) classes.push(value);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                remove: update(<span class="keyword">function</span>(classes, index) &#123;  </div><div class="line">                    <span class="keyword">if</span> (~index) classes.splice(index, 1);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                toggle: update(<span class="keyword">function</span>(classes, index, value) &#123;  </div><div class="line">                    <span class="keyword">if</span> (~index)  </div><div class="line">                        classes.splice(index, 1);  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        classes.push(value);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                contains: <span class="keyword">function</span>(value) &#123;  </div><div class="line">                    <span class="built_in">return</span> !!~self.className.split(/\s+/g).indexOf(value);  </div><div class="line">                &#125;,  </div><div class="line">                  </div><div class="line">                item: <span class="keyword">function</span>(i) &#123;  </div><div class="line">                    <span class="built_in">return</span> self.className.split(/\s+/g)[i] || null;  </div><div class="line">                &#125;  </div><div class="line">            &#125;;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>dataset ie9及以下不兼容 </p></li></ol><p>elem.getAttribute(‘data-index’);</p><ol><li>ie9不支持transition </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;总结一下ie兼容性问题&quot;&gt;&lt;a href=&quot;#总结一下ie兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;总结一下ie兼容性问题&quot;&gt;&lt;/a&gt;总结一下ie兼容性问题&lt;/h3&gt;&lt;h4 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="ie" scheme="http://yoursite.com/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>automation</title>
    <link href="http://yoursite.com/2018/03/09/automation/"/>
    <id>http://yoursite.com/2018/03/09/automation/</id>
    <published>2018-03-09T06:42:03.000Z</published>
    <updated>2018-03-09T17:14:20.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端自动化构建工具"><a href="#前端自动化构建工具" class="headerlink" title="前端自动化构建工具"></a>前端自动化构建工具</h3><h4 id="gulp-grunt-webpack"><a href="#gulp-grunt-webpack" class="headerlink" title="gulp grunt webpack"></a>gulp grunt webpack</h4><h4 id="gulp-grunt-与-webpack-的区别"><a href="#gulp-grunt-与-webpack-的区别" class="headerlink" title="gulp/grunt 与 webpack 的区别"></a>gulp/grunt 与 webpack 的区别</h4><pre><code>都是前端自动化构建工具gulp/grunt 是一种能够优化前端的开发流程的工具。webpack是一种模块化的解决方案。</code></pre><h4 id="为什么使用webpack？"><a href="#为什么使用webpack？" class="headerlink" title="为什么使用webpack？"></a>为什么使用webpack？</h4><pre><code>1. 模块化 把复杂的程序化为小的文件2. 转译 es6等浏览器不能直接使用js的特性 3. scss ,less 等css预处理器。</code></pre><h4 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h4><pre><code>css css-loader =&gt; 处理css文件style-loader =&gt; 将css-loader处理后的文件作为样式标签&lt;style&gt;插入到html文件中</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端自动化构建工具&quot;&gt;&lt;a href=&quot;#前端自动化构建工具&quot; class=&quot;headerlink&quot; title=&quot;前端自动化构建工具&quot;&gt;&lt;/a&gt;前端自动化构建工具&lt;/h3&gt;&lt;h4 id=&quot;gulp-grunt-webpack&quot;&gt;&lt;a href=&quot;#gulp-gr
      
    
    </summary>
    
    
      <category term="automation" scheme="http://yoursite.com/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://yoursite.com/2018/03/08/xss/"/>
    <id>http://yoursite.com/2018/03/08/xss/</id>
    <published>2018-03-08T10:21:10.000Z</published>
    <updated>2018-03-08T11:41:23.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><pre><code>XSS 跨站脚本攻击(Cross Site Scripting)</code></pre><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><pre><code>反射型 存储型反射型 发出请求时，xss代码出现在url中，作为输入提交到服务器，服务器端解析后响应，xss代码随相应内容一起传回给浏览器。存储型 提交的代码会存储在服务器端( 数据库，内存，文件系统等)，下次请求目标页面时不用提交XSS代码</code></pre><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><pre><code>编码 过滤 校正编码  html Entity 对字符转义过滤 (最重要)    移除用户上传的DOM属性，eg:onerror onclick     移除用户上传的Style Script Iframe节点等    校正    避免直接对html entity解码    使用DOM Parse转换，校正不配对的DOM标签。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;XSS 跨站脚本攻击(Cross Site Scripting)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;攻击方式
      
    
    </summary>
    
    
      <category term="safe" scheme="http://yoursite.com/tags/safe/"/>
    
  </entry>
  
  <entry>
    <title>mvvm</title>
    <link href="http://yoursite.com/2018/03/07/mvvm/"/>
    <id>http://yoursite.com/2018/03/07/mvvm/</id>
    <published>2018-03-07T10:11:10.000Z</published>
    <updated>2018-03-21T10:47:22.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mvvm-框架"><a href="#mvvm-框架" class="headerlink" title="mvvm 框架"></a>mvvm 框架</h3><h4 id="1-了解"><a href="#1-了解" class="headerlink" title="1.了解"></a>1.了解</h4><p>Vue React Angular</p><p>MVC Model View Controller<br>MVVM Model View ViewModel</p><p>mvvm定位 Model &lt;=&gt; ViewModel &lt;=&gt; View Model 与 View 是分离的</p><h5 id="MVC-与-MVVM-区别"><a href="#MVC-与-MVVM-区别" class="headerlink" title="MVC 与 MVVM 区别"></a>MVC 与 MVVM 区别</h5><p>  在MVC里，View是可以直接访问Model的。Model不依赖View,而View依赖于Model。更改view更难。<br>  在MVVM里， View(页面)与Model(数据)是分离的。</p><h4 id="2-双向绑定的原理"><a href="#2-双向绑定的原理" class="headerlink" title="2.双向绑定的原理"></a>2.双向绑定的原理</h4><ol><li>data=&gt;view data改变会使view变化<br>view=&gt;data view变化也会改变data<br>绑定 =&gt; 自动化处理，不需要人为关心。</li><li><p>原理<br> data =&gt; view Object.defineProperty get/set操作 依靠它 监听data的变化<br> view =&gt; data input事件，只不过框架执行了我们看不到。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; &#125;;</div><div class="line">      // 为obj定义一个名为 hello 的访问器属性</div><div class="line">      Object.defineProperty(obj, <span class="string">"hello"</span>, &#123;</div><div class="line">        get: <span class="function"><span class="title">function</span></span> () &#123;<span class="built_in">return</span> sth&#125;,</div><div class="line">        <span class="built_in">set</span>: <span class="keyword">function</span> (val) &#123;/* <span class="keyword">do</span> sth */&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> object.defineProperty 与 reflect.defineProperty 区别</p><pre><code>object.defineProperty 返回的是一个对象reflect.defineProperty 返回Boolean值作为成功的状态</code></pre><p> object.defineProperty 还可以用来 深度复制<br> let desc = Object.getOwnPropertyDescriptor(source,key);<br> Object.defineProperty(target,key,desc);</p></li></ol><h4 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h4><pre><code>观察者模式 data =&gt; Observer Dep Watcher =&gt; View</code></pre><h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h4><h5 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h5><pre><code>beforeCreate  =&gt; el与data并未初始化        =&gt; 可以在这加loading事件。created          =&gt; 完成了data数据的初始化。  =&gt; 做一些初始化，实现函数自执行。beforeMount   =&gt; 完成了el和data初始化mounted          =&gt; 完成挂载                   =&gt; 向后端发起请求，那回数据，配合路由钩子做事beforeDestorydestoryed                                   =&gt; 当前组件已被删除，清空相关内容。beforeUpdateupdated</code></pre><h5 id="React"><a href="#React" class="headerlink" title="React"></a>React</h5><pre><code>static defaultPropsconstructor            =&gt; 接收父组件的props，contextcomponentWillMount        =&gt; 组件刚经历constructor,初始完数据 组件还未render，dom未渲染rendercomponentDidMount      =&gt; 组件第一次渲染完成，此时dom节点已经生成，可以调用ajax,返回数据setState后组件会重新渲染componentWillUnmount   =&gt; clear 组件中的定时器 setTimeout，setInterval，移除组件监听。componentWillReceivePropsshouldCompoentUpdatecomponentWillUpdaterendercomponentDidUpdate</code></pre><h4 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h4><h5 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import VRouter from <span class="string">'vue-router'</span>;</div><div class="line">app.use(VRouter);</div><div class="line"><span class="built_in">let</span> router = new VueRouter(&#123;</div><div class="line">mode: <span class="string">'history'</span>,</div><div class="line">routes: [</div><div class="line">  &#123;path:<span class="string">'/'</span>,component: IndexPage&#125;,</div><div class="line">  &#123;path:<span class="string">'/detail'</span>,component: DetailPage,redirect:<span class="string">'/detail/analysis'</span>,</div><div class="line">    children: [</div><div class="line">      &#123;path:<span class="string">'forecast'</span>,component: ForPage&#125;,</div><div class="line">      &#123;path:<span class="string">'analysis'</span>,component: AnaPage&#125;,</div><div class="line">      &#123;path:<span class="string">'count'</span>,component: CouPage&#125;,</div><div class="line">      &#123;path:<span class="string">'publish'</span>,component: PubPage&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">new vue(&#123;router&#125;)</div></pre></td></tr></table></figure><pre><code>vue 比 react 多了一个 router-view<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;keep-alive&gt;</div><div class="line">  &lt;router-view :seller=<span class="string">"seller"</span>&gt;&lt;/router-view&gt;</div><div class="line">&lt;/keep-alive&gt;</div></pre></td></tr></table></figure>keep-alive 作用把切换出去的组件保存到内存中，保留它的状态或避免重复渲染。</code></pre><h6 id="链接-重定向"><a href="#链接-重定向" class="headerlink" title="链接(重定向)"></a>链接(重定向)</h6><p>router-link</p><ol><li><router-link to="/good"></router-link></li><li><router-link :to="{name:'banana',params:{color:'yellow'}}"></router-link></li><li><router-link to="/good" tag="li"></router-link> 就变成li标签了</li></ol><h5 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123;Route,BrowserRouter,Switch,HashRouter&#125; from <span class="string">'react-router-dom'</span>;</div><div class="line"></div><div class="line">&lt;HashRouter&gt;</div><div class="line">&lt;Switch&gt;</div><div class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;PCIndex&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;Route path=<span class="string">"/details/:uniquekey"</span> component=&#123;PCNewsDetails&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;PCUserCenter&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div><div class="line">&lt;/HashRouter&gt;</div></pre></td></tr></table></figure><h6 id="链接-重定向-1"><a href="#链接-重定向-1" class="headerlink" title="链接(重定向)"></a>链接(重定向)</h6><p>import {Link} from ‘react-router-dom’;</p><link to="/list">我的私人音乐坊 &qt;<h4 id="6-params"><a href="#6-params" class="headerlink" title="6. params"></a>6. params</h4><h5 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h5><pre><code>获取params =&gt; this.$route.params</code></pre><h5 id="react"><a href="#react" class="headerlink" title="react"></a>react</h5><pre><code>获取params =&gt; this.props.params</code></pre><h4 id="7-获取DOM"><a href="#7-获取DOM" class="headerlink" title="7. 获取DOM"></a>7. 获取DOM</h4><p>1.vue=&gt; this.$ref.name<br>2.react =&gt; this.ref.name</p><h4 id="8-数据请求"><a href="#8-数据请求" class="headerlink" title="8. 数据请求"></a>8. 数据请求</h4><h5 id="vue-1"><a href="#vue-1" class="headerlink" title="vue"></a>vue</h5><h6 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h6><pre><code>import VueResource from &apos;vue-resource&apos;;app.use(VueResource);this.$http.get(&apos;/goods/list&apos;)    .then((response) =&gt; {        response = response.body;            if (response.status === &apos;0&apos;) {                 this.goods = response.result.list;                       this.$nextTick(() =&gt; {                     this._initScroll();                     this._calculateHeight();                });            }    });    跨域：代理 proxyTable</code></pre><h6 id="axios-gt-vue2-0以后用axios"><a href="#axios-gt-vue2-0以后用axios" class="headerlink" title="axios =&gt; vue2.0以后用axios"></a>axios =&gt; vue2.0以后用axios</h6><pre><code>import axios from &apos;axios&apos;;axios.get(&apos;/users/addressList&apos;).then((response)=&gt;{        var res = response.data;        this.addressList = res.result;        this.addressList.forEach((item,index)=&gt;{           if(item.isDefault){             this.currentIndex = index;             this.selectedAddressId = item.addressId;           }        })      })跨域跨域post实例，用到了qs组件来避开ajax信使请求，并兼容Android。import axios from &apos;axios&apos;;import qs from &apos;qs&apos;;axios.post(&apos;http://www.xyz.com/request&apos;, qs.stringify(params)).then(response =&gt; {  console.log(response);}).catch(err =&gt; {  console.log(err);});</code></pre><h5 id="react-gt-fetch"><a href="#react-gt-fetch" class="headerlink" title="react =&gt; fetch"></a>react =&gt; fetch</h5><pre><code>var myFetchOptions = {    method: &apos;GET&apos;};fetch(&quot;http://newsapi.gugujiankong.com/Handler.ashx?action=uc&amp;userid=&quot; + localStorage.React_userid + &quot;&amp;uniquekey=&quot; + this.props.uniquekey, myFetchOptions).then(response=&gt;response.json()).then(json=&gt;{    //收藏成功以后进行一下全局的提醒    notification[&apos;success&apos;]({message:&apos;ReactNews提醒&apos;,description:&apos;收藏此文章成功&apos;});})fetch 跨域 =&gt; 数据模拟我选择代理方式proxy || fetch-jsonp 插件实现jsonp&quot;proxy&quot;: {  &quot;/api&quot;: {    &quot;target&quot;: &quot;http://localhost:4000&quot;,    &quot;secure&quot;: false  },  &quot;/tuan&quot;: {    &quot;target&quot;: &quot;http://m.dianping.com&quot;,    &quot;secure&quot;: false  }}</code></pre><h4 id="9-组件间数据传递"><a href="#9-组件间数据传递" class="headerlink" title="9. 组件间数据传递"></a>9. 组件间数据传递</h4><h5 id="vue-2"><a href="#vue-2" class="headerlink" title="vue"></a>vue</h5><h6 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h6><p>父 =&gt; 子</p><pre><code>父组件中&lt;food :food=&quot;selectedFood&quot;&gt;&lt;/food&gt;子组件接收    props:{        food:{            type:Object        }    }子组件使用数据方式 this.food (即与data中数据使用方式相同)</code></pre><p>子 =&gt; 父</p><pre><code>this.$emit(&apos;add&apos;,target/msg) =&gt; 触发父组件中add事件，执行add绑定的函数。</code></pre><h6 id="子组件之间数据传递-eventBus-or-vuex全局"><a href="#子组件之间数据传递-eventBus-or-vuex全局" class="headerlink" title="子组件之间数据传递  eventBus or vuex全局"></a>子组件之间数据传递  eventBus or vuex全局</h6><pre><code> evetnBus功能:实现组件间通信，点击外部关闭select=&gt;同一时间最多有一个select处于下拉状态建立eventBus.js  import Vue from &apos;vue&apos;  const eventBus = new Vue()  export { eventBus }全局组件中定义click事件   resetComponent() { eventBus.$emit(&apos;reset-component&apos;) }具有select的组件中触发eventBus   mounted () {       eventBus.$on(&apos;reset-component&apos;, () =&gt; {         this.isDrop = false       })       // 每一个select组件 只要触发reset-component 就会使this.isDrop重置  }  toggleDrop(e) {    e.stopPropagation()  //注意要阻止冒泡    eventBus.$emit(&apos;reset-component&apos;)  //多个select 点击别的select也触发事件    this.isDrop = !this.isDrop   }vuex</code></pre><p>核心 State Getter Mutation Action Module</p><p>actions(commit) =&gt; mutations(同步函数) =&gt; state(改变state) =&gt; components(自动更新componets)</p><pre><code>1.import Vuex from &apos;vuex&apos;;2. Vue.use(Vuex);3. const store = new Vuex.Store({    state:{        userName:&apos;&apos;,        cartCount:0    },    mutations:{        updateUserInfo(state,userName){            state.userName = userName;        },        updateCartCount(state,cartCount){            state.cartCount += cartCount;        },        initCartCount(state,cartCount){            state.cartCount = cartCount;        }    }})4.new Vue({store});const store = new Vuex.Store({    state:{        userName:&apos;&apos;,        cartCount:0    },    mutations:{        updateUserInfo(state,userName){            state.userName = userName;        },        updateCartCount(state,cartCount){            state.cartCount += cartCount;        },        initCartCount(state,cartCount){            state.cartCount = cartCount;        }    }})&lt;!-- 在各个组件中都可以使用 this.$store.commit(mutations中的方法) 来更新components --&gt;this.$store.commit(&quot;updateCartCount&quot;,-1);Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：       应用层级的状态应该集中到单个 store 对象中。       提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。       异步逻辑都应该封装到 action 里面。State  作为一个“唯一数据源 (SSOT)”而存在       从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：       computed: {           count () {             return store.state.count           }       }        mapState: mapGetters...同理         import { mapState } from &apos;vuex&apos;         ...mapState(...)  Getter  有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：        const store = new Vuex.Store({          state: {            todos: [              { id: 1, text: &apos;...&apos;, done: true },              { id: 2, text: &apos;...&apos;, done: false }            ]          },          getters: {            doneTodos: state =&gt; {              return state.todos.filter(todo =&gt; todo.done)            }          }        })Mutation 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。         触发 store.commit(&apos;increment&apos;)         注意事项           最好提前在你的 store 中初始化好所有所需属性。           当需要在对象上添加新属性时，你应该           使用 Vue.set(obj, &apos;newProp&apos;, 123), 或者           以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：           state.obj = { ...state.obj, newProp: 123 }           一条重要的原则就是要记住 mutation 必须是同步函数Action    Action 类似于 mutation，不同在于：            Action 提交的是 mutation，而不是直接变更状态。            Action 可以包含任意异步操作。          Action 通过 store.commit 方法触发：            store.commit(&apos;increment&apos;)</code></pre><h5 id="react-1"><a href="#react-1" class="headerlink" title="react"></a>react</h5><h6 id="父子组件数据传递"><a href="#父子组件数据传递" class="headerlink" title="父子组件数据传递"></a>父子组件数据传递</h6><ol><li>父 =&gt; 子 通过props传递</li></ol><p>父组件 <food food="this.state.selectedFood"></food><br>子组件接收 this.props.food </p><p><em>vue 与 react 数据使用格式区别</em><br>vue<br>1.html中=&gt;直接使用 data/porps中数据名称。<br>2.js中=&gt; this.数据名称<br>react<br>1.html/js中 =&gt; this.props.数据名称/this.state.数据名称</p><ol><li>子 =&gt; 父 通过函数 父组件中函数传递给子组件，子组件中返回数据给父组件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">子组件 progress组件中:</div><div class="line">   changeProgress(e)&#123;</div><div class="line">    <span class="built_in">let</span> progressBar = this.refs.progressBar;</div><div class="line">    <span class="built_in">let</span> progress = (e.clientX - progressBar.getBoundingClientRect().left) /progressBar.clientWidth;</div><div class="line">    this.props.onProgressChange &amp;&amp; this.props.onProgressChange(progress);</div><div class="line">   &#125;</div><div class="line">   &lt;div className=<span class="string">"components-progress"</span> ref=<span class="string">"progressBar"</span> onClick=&#123;this.changeProgress.bind(this)&#125;&gt;</div><div class="line">父组件 player组件中:</div><div class="line">  progressChangeHandler(progress) &#123;</div><div class="line">    $(<span class="string">'#player'</span>).jPlayer(this.state.isPlay?<span class="string">'play'</span>:<span class="string">'pause'</span>, duration*progress);</div><div class="line">  &#125;</div><div class="line">  &lt;Progress progress=&#123;this.state.progress&#125; onProgressChange=&#123;this.progressChangeHandler.bind(this)&#125; /&gt;</div></pre></td></tr></table></figure><ol><li>子组件间通信</li></ol><p>1.子 =&gt; 父 =&gt; 子</p><p>子组件传给父组件 父组件根据子组件数据改变state, state改变重新render下面的子组件<br>由于 Parent 的 state 发生变化，会触发 Parent 及从属于 Parent 的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的 componentDidUpdate 方法均被触发。所以有别的就用别的。</p><p>2.eventProxy</p><p>eventProxy 中，总共有 on、one、off、trigger 这 4 个函数：</p><p>on、one：on 与 one 函数用于订阅者监听相应的事件，并将事件响应时的函数作为参数，on 与 one 的唯一区别就是，使用 one 进行订阅的函数，只会触发一次，而 使用 on 进行订阅的函数，每次事件发生相应时都会被触发。<br>trigger：trigger 用于发布者发布事件，将除第一参数（事件名）的其他参数，作为新的参数，触发使用 one 与 on 进行订阅的函数。<br>off：用于解除所有订阅了某个事件的所有函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="string">'use strict'</span>;</div><div class="line">const eventProxy = &#123;</div><div class="line">  onObj: &#123;&#125;,</div><div class="line">  oneObj: &#123;&#125;,</div><div class="line">  on: <span class="keyword">function</span>(key, fn) &#123;</div><div class="line">    <span class="keyword">if</span>(this.onObj[key] === undefined) &#123;</div><div class="line">      this.onObj[key] = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.onObj[key].push(fn);</div><div class="line">  &#125;,</div><div class="line">  one: <span class="keyword">function</span>(key, fn) &#123;</div><div class="line">    <span class="keyword">if</span>(this.oneObj[key] === undefined) &#123;</div><div class="line">      this.oneObj[key] = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.oneObj[key].push(fn);</div><div class="line">  &#125;,</div><div class="line">  off: <span class="keyword">function</span>(key) &#123;</div><div class="line">    this.onObj[key] = [];</div><div class="line">    this.oneObj[key] = [];</div><div class="line">  &#125;,</div><div class="line">  trigger: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">let</span> key, args;</div><div class="line">    <span class="keyword">if</span>(arguments.length == 0) &#123;</div><div class="line">      <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    key = arguments[0];</div><div class="line">    args = [].concat(Array.prototype.slice.call(arguments, 1));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(this.onObj[key] !== undefined</div><div class="line">      &amp;&amp; this.onObj[key].length &gt; 0) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="built_in">let</span> i <span class="keyword">in</span> this.onObj[key]) &#123;</div><div class="line">        this.onObj[key][i].apply(null, args);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(this.oneObj[key] !== undefined</div><div class="line">      &amp;&amp; this.oneObj[key].length &gt; 0) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="built_in">let</span> i <span class="keyword">in</span> this.oneObj[key]) &#123;</div><div class="line">        this.oneObj[key][i].apply(null, args);</div><div class="line">        this.oneObj[key][i] = undefined;</div><div class="line">      &#125;</div><div class="line">      this.oneObj[key] = [];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">export</span> default eventProxy;</div></pre></td></tr></table></figure><p>栗子 =&gt; usercenter页面改变数据 更新header 登录状态;trigger =&gt;触发 on事件</p><p>header =&gt; 注册on事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import eventProxy from <span class="string">'../eventProxy'</span></div><div class="line">eventProxy.on(<span class="string">'hasLogined'</span>, (hasLogined) =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      hasLogined</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>usercenter =&gt; 触发 trigger<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import eventProxy from <span class="string">'../eventProxy'</span></div><div class="line"><span class="function"><span class="title">logout</span></span>()&#123;</div><div class="line">  localStorage.React_userid = <span class="string">''</span>;</div><div class="line">  localStorage.userNickName = <span class="string">''</span>;</div><div class="line">  eventProxy.trigger(<span class="string">'hasLogined'</span>, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>redux</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from <span class="string">'redux'</span>;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class="line"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class="line"> *</div><div class="line"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class="line"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class="line"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class="line"> *</div><div class="line"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class="line"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class="line"> */</div><div class="line"><span class="keyword">function</span> counter(state = 0, action) &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</div><div class="line">    <span class="built_in">return</span> state + 1;</div><div class="line">  <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</div><div class="line">    <span class="built_in">return</span> state - 1;</div><div class="line">  default:</div><div class="line">    <span class="built_in">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 创建 Redux store 来存放应用的状态。</div><div class="line">// API 是 &#123; subscribe, dispatch, getState &#125;。</div><div class="line"><span class="built_in">let</span> store = createStore(counter);</div><div class="line"></div><div class="line">// 可以手动订阅更新，也可以事件绑定到视图层。</div><div class="line">store.subscribe(() =&gt;</div><div class="line">  console.log(store.getState())</div><div class="line">);</div><div class="line"></div><div class="line">// 改变内部 state 惟一方法是 dispatch 一个 action。</div><div class="line">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'INCREMENT'</span> &#125;);</div><div class="line">// 1</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'INCREMENT'</span> &#125;);</div><div class="line">// 2</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'DECREMENT'</span> &#125;);</div><div class="line">// 1</div></pre></td></tr></table></figure><p>Provider connect</p><p>Provider 内的组件要必须被 connect 过的</p><p>connect =&gt; mapStateToProps(state,ownProps)/mapDispatchToProps(dispatch,ownProps)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mvvm-框架&quot;&gt;&lt;a href=&quot;#mvvm-框架&quot; class=&quot;headerlink&quot; title=&quot;mvvm 框架&quot;&gt;&lt;/a&gt;mvvm 框架&lt;/h3&gt;&lt;h4 id=&quot;1-了解&quot;&gt;&lt;a href=&quot;#1-了解&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="mvvm" scheme="http://yoursite.com/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>react_props</title>
    <link href="http://yoursite.com/2018/03/01/react-props/"/>
    <id>http://yoursite.com/2018/03/01/react-props/</id>
    <published>2018-03-01T02:20:14.000Z</published>
    <updated>2018-03-01T04:47:44.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-props"><a href="#react-props" class="headerlink" title="react props"></a>react props</h3><h4 id="this-props-children-React-Children"><a href="#this-props-children-React-Children" class="headerlink" title="this.props.children/React.Children"></a>this.props.children/React.Children</h4><pre><code>this.props.children 表示组件的所有子节点</code></pre><h4 id="this-props-children-与-React-Children-区别"><a href="#this-props-children-与-React-Children-区别" class="headerlink" title="this.props.children 与 React.Children 区别"></a>this.props.children 与 React.Children 区别</h4><pre><code>1.函数作为child传递    this.props.children.map is not a function    React.Children.map 不会报错2.count=&gt;获取子组件个数    this.props.children.length 不可行    React.Children.count(this.props.children) =&gt; 返回子组件个数3. React.Children.toArray4. 执行单一child    React.children.only(this.props.children)    只能在传递单一child的情况下使用，而且child必须为函数。5. React.cloneElement        renderChildren() {          return React.Children.map(this.props.children, child =&gt; {            return React.cloneElement(child, {              name: this.props.name            })          })        }</code></pre><h4 id="属性传递"><a href="#属性传递" class="headerlink" title="属性传递"></a>属性传递</h4><pre><code>属性不能跨层传递,也不能反向传递所以 传递单个的props多次，很麻烦也不容易改动{...this.props} =&gt; 获取父组件的props 传给 子组件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-props&quot;&gt;&lt;a href=&quot;#react-props&quot; class=&quot;headerlink&quot; title=&quot;react props&quot;&gt;&lt;/a&gt;react props&lt;/h3&gt;&lt;h4 id=&quot;this-props-children-React-Chi
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>match</title>
    <link href="http://yoursite.com/2018/02/27/match/"/>
    <id>http://yoursite.com/2018/02/27/match/</id>
    <published>2018-02-26T16:54:37.000Z</published>
    <updated>2018-02-26T18:21:59.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><h4 id="获取search中的key值"><a href="#获取search中的key值" class="headerlink" title="获取search中的key值"></a>获取search中的key值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> GetQueryString(key)&#123;</div><div class="line">var reg = new RegExp(<span class="string">"(/\?|&amp;)"</span>+ key + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</div><div class="line">&lt;!-- var search  = window.location.search.match(reg); --&gt;</div><div class="line">var search  = reg.exec(window.location.search); <span class="built_in">exec</span>与match相反</div><div class="line"><span class="keyword">if</span>(search != null) <span class="built_in">return</span> unescape(search[2]);<span class="built_in">return</span> null; // unescape 与 .json()相似</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><pre><code>返回值返回匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。总结：就是0: 匹配的是reg,及全部的内容1: 第一个 ()匹配子项的内容 N: 第N个 ()匹配子项的内容整个正则表达式匹配的字符串括号匹配的子串，每一对括号对应一个子串</code></pre><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre><code>str = &quot;12324&quot;str.match(/\d+/)[ &apos;12324&apos;]str = &quot;12324&quot;str.match(/(\d+)/)[ &apos;12324&apos;, &apos;12324&apos;]str = &quot;123abc&quot; str.match(/\d+[a-z]+/)[ &apos;1232abc&apos;]str = &quot;1232abc&quot;str.match(/(\d+)([a-z]+)/)[ &apos;1232abc&apos;, &apos;1232&apos;, &apos;abc&apos;]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;match&quot;&gt;&lt;a href=&quot;#match&quot; class=&quot;headerlink&quot; title=&quot;match&quot;&gt;&lt;/a&gt;match&lt;/h3&gt;&lt;h4 id=&quot;获取search中的key值&quot;&gt;&lt;a href=&quot;#获取search中的key值&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="RegExp" scheme="http://yoursite.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>regExp</title>
    <link href="http://yoursite.com/2018/02/22/regExp/"/>
    <id>http://yoursite.com/2018/02/22/regExp/</id>
    <published>2018-02-22T04:56:53.000Z</published>
    <updated>2018-03-19T10:20:41.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><pre><code>g/i/m/y/ug =&gt; 全局查找 从上一次匹配的位置继续寻找直到找到匹配的位置开始，不一定是第一个就匹配上i =&gt; 大小写不敏感m =&gt; 检测字符串中的换行符y =&gt; es6 全局查找 但是 必须是匹配成后紧跟着的第一个字符就要匹配成功才算u =&gt;  用来处理Unicode字符的 大于两个字符(0xffff) .不匹配/量词(大于0xffff)/u{61}(这种Unicode字符)</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h5><pre><code>compile =&gt; 编译正则表达式exec =&gt; 搜索字符串中指定的值。返回找到的值，并确定其位置test =&gt; 搜索字符串中指定的值。返回true或false</code></pre><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><pre><code>search =&gt; 搜索与正则表达式相匹配的值，stringObject 中第一个与 regexp 相匹配的子串的起始位置。注释：如果没有找到任何匹配的子串，则返回 -1。match =&gt; 找到一个或者多个正则表达式的匹配。 返回的是匹配的值，没有 为 nullreplace =&gt; 替换与正则表达式匹配的子串。split =&gt; string ==&gt; []</code></pre><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><pre><code>w =&gt; 查找字符单词  W =&gt; 查找非单词字符d =&gt; 查找数字      D =&gt; 查找非数字字符s =&gt; 查找空白字符  S =&gt; 查找非空白字符b =&gt; 匹配单词边界  B =&gt; 匹配非单词边界[] =&gt; 用于查找某个范围内的字符{} =&gt; 量词^ =&gt; 字符串的开始位置$ =&gt; 字符串的结束位置* =&gt; {0,}+ =&gt; {1,}? =&gt; {0,1}</code></pre><h4 id="用到过的正则例子"><a href="#用到过的正则例子" class="headerlink" title="用到过的正则例子"></a>用到过的正则例子</h4><pre><code>1. 邮箱验证 xx@xx.com/cn;var s = &apos;1205562160@qq.com&apos;;var reg = new RegExp(/\d{5,11}@\w{2,3}\.com|cn/);reg.test(s);2. trimfunction trim(s){    return s.replace(/(^\s*)|(\s*$)/g,&apos;&apos;);}3. 去掉重复的字符串var str = &apos;aaabccddde&apos;;str = str.replace(/(.)\1+/g,&apos;$1&apos;);4. 验证注册名称 字母开头，后面数字、字符串、下划线，长度为9-20；var s = &apos;a2323_wewwe&apos;;var reg = new RegExp(/^[a-zA-Z][\w]{8-19}$/,&apos;g&apos;);reg.test(s);5. 数字每三位数添加逗号var num = 1233445454.12;num.toString().replace(/(\d)(?=(\d{3})+\.)/g,function($2){    return $2+&apos;,&apos;;})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;h4 id=&quot;修饰符&quot;&gt;&lt;a href=&quot;#修饰符&quot; class=&quot;headerlink&quot; title=&quot;修饰符&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="regexp" scheme="http://yoursite.com/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>gulp</title>
    <link href="http://yoursite.com/2018/02/21/gulp/"/>
    <id>http://yoursite.com/2018/02/21/gulp/</id>
    <published>2018-02-21T07:16:58.000Z</published>
    <updated>2018-03-04T07:13:08.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><pre><code>gulp中使用的是node的stream（流），是以stream为媒介先读取需要的stream，通过stream的pipe()方法导入到想要的地方，比如插件等，经过插件处理过的流可以继续导入到其他地方，包括写入到文件中</code></pre><h4 id="最简-gulp"><a href="#最简-gulp" class="headerlink" title="最简 gulp"></a>最简 gulp</h4><pre><code>&lt;!-- build:css css/combined.css --&gt;&lt;!-- endbuild --&gt;&lt;!-- build:js js/combined.js --&gt;&lt;!-- endbuild --&gt;</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var gulp = require(<span class="string">'gulp'</span>);</div><div class="line">var rev = require(<span class="string">'gulp-rev'</span>);</div><div class="line">var revReplace = require(<span class="string">'gulp-rev-Replace'</span>);</div><div class="line">var useref = require(<span class="string">'gulp-useref'</span>);</div><div class="line">var filter = require(<span class="string">'gulp-filter'</span>);</div><div class="line">var uglify = require(<span class="string">'gulp-uglify'</span>);</div><div class="line">var csso = require(<span class="string">'gulp-csso'</span>);</div><div class="line"></div><div class="line">var imagemin = require(<span class="string">'gulp-imagemin'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var jsFilter = filter(<span class="string">'**/*.js'</span>,&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line">var cssFilter = filter(<span class="string">'**/*.css'</span>,&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line">var indexHtmlFilter = filter([<span class="string">'**/*'</span>,<span class="string">'!**/index.html'</span>],&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">return</span> gulp.src(<span class="string">'src/index.html'</span>)</div><div class="line">.pipe(useref())</div><div class="line">.pipe(jsFilter)</div><div class="line">.pipe(uglify())</div><div class="line">.pipe(jsFilter.restore)</div><div class="line">.pipe(cssFilter)</div><div class="line">.pipe(csso())</div><div class="line">.pipe(cssFilter.restore)</div><div class="line">.pipe(indexHtmlFilter)</div><div class="line">.pipe(rev())</div><div class="line">.pipe(indexHtmlFilter.restore)</div><div class="line">.pipe(revReplace())</div><div class="line">.pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 压缩图片任务</div><div class="line">// 在命令行输入 gulp images 启动此任务</div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">// 1. 找到图片</div><div class="line">gulp.src(<span class="string">'src/img/*.*'</span>)</div><div class="line">// 2. 压缩图片</div><div class="line">.pipe(imagemin(&#123;</div><div class="line">progressive: <span class="literal">true</span></div><div class="line">&#125;))</div><div class="line">// 3. 另存图片</div><div class="line">.pipe(gulp.dest(<span class="string">'dist/img'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gulp&quot;&gt;&lt;a href=&quot;#gulp&quot; class=&quot;headerlink&quot; title=&quot;gulp&quot;&gt;&lt;/a&gt;gulp&lt;/h3&gt;&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h
      
    
    </summary>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>hawk</title>
    <link href="http://yoursite.com/2018/02/06/hawk/"/>
    <id>http://yoursite.com/2018/02/06/hawk/</id>
    <published>2018-02-06T01:41:38.000Z</published>
    <updated>2018-02-06T02:24:33.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hawk"><a href="#hawk" class="headerlink" title="hawk"></a>hawk</h3><p>注：有时候网页采集器中的url获取不到真实数据，就不能抓到数据。</p><h4 id="网页采集器"><a href="#网页采集器" class="headerlink" title="网页采集器"></a>网页采集器</h4><p>搜索字符=&gt;属性名=&gt;手气不错 </p><p>就可以抓到数据，有时候要多试几次。</p><h4 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h4><p>生成区间数=&gt;选择区间(也就是页数)<br>合并多列=&gt;填写输出列的名称=&gt;Format 填写utl(0)。<br>从爬虫转换=&gt;一般不用 填爬虫选择<br>写入数据表=&gt;给数据定义名字<br>数据库操作<br>导出=&gt;串行模式/并行模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hawk&quot;&gt;&lt;a href=&quot;#hawk&quot; class=&quot;headerlink&quot; title=&quot;hawk&quot;&gt;&lt;/a&gt;hawk&lt;/h3&gt;&lt;p&gt;注：有时候网页采集器中的url获取不到真实数据，就不能抓到数据。&lt;/p&gt;
&lt;h4 id=&quot;网页采集器&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="http://yoursite.com/2018/02/02/promise/"/>
    <id>http://yoursite.com/2018/02/02/promise/</id>
    <published>2018-02-02T06:33:24.000Z</published>
    <updated>2018-03-17T19:25:37.931Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><pre><code>Promise是一个构造函数。该函数有一个函数参数函数参数有两个参数 resolve reject ,分别为成功与失败之后的回调函数。</code></pre><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</div><div class="line">...</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>1.Promise.all()=&gt;用于汇总多个promise的结果。<br>2.Promise.race()<br>3.Promise.reject(reason)<br>4.Promise.resolve(value)<br>5.Promise.prototype.catch(onRejected)<br>6.Promise.prototype.then(onFulfilled, onRejected)<br>7.Promise.prototype.finally(onFinally)</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>1.一个async函数可以包含一个await表达式，暂停异步函数的执行并等待传入Promise的解析，然后恢复async函数的执行并返回解析后的值。<br>eg:=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> resolveAfter2Seconds(x) &#123;</div><div class="line">  <span class="built_in">return</span> new Promise(resolve =&gt; &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      resolve(x);</div><div class="line">    &#125;, 2000);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">async <span class="keyword">function</span> add1(x) &#123;</div><div class="line">  const a = await resolveAfter2Seconds(20);</div><div class="line">  const b = await resolveAfter2Seconds(30);</div><div class="line">  <span class="built_in">return</span> x + a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add1(10).<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">  console.log(v);  // prints 60 after 4 seconds.</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">async <span class="keyword">function</span> add2(x) &#123;</div><div class="line">  const p_a = resolveAfter2Seconds(20);</div><div class="line">  const p_b = resolveAfter2Seconds(30);</div><div class="line">  <span class="built_in">return</span> x + await p_a + await p_b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add2(10).<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">  console.log(v);  // prints 60 after 2 seconds.</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>2.函数重写承诺链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> getProcessedData(url) &#123;</div><div class="line">  <span class="built_in">return</span> downloadData(url) // returns a promise</div><div class="line">    .catch(e =&gt; &#123;</div><div class="line">      <span class="built_in">return</span> downloadFallbackData(url)  // returns a promise</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">      <span class="built_in">return</span> processDataInWorker(v); // returns a promise</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">它可以用一个async函数重写，如下所示：</div><div class="line"></div><div class="line">async <span class="keyword">function</span> getProcessedData(url) &#123;</div><div class="line">  <span class="built_in">let</span> v;</div><div class="line">  try &#123;</div><div class="line">    v = await downloadData(url); </div><div class="line">  &#125; catch(e) &#123;</div><div class="line">    v = await downloadFallbackData(url);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">return</span> processDataInWorker(v);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h5><h6 id="用法：Promise-all-迭代"><a href="#用法：Promise-all-迭代" class="headerlink" title="用法：Promise.all(迭代)"></a>用法：Promise.all(迭代)</h6><p>迭代：一个可迭代的对象，如Array或者String.</p><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>　异步性</p><p>1.同步，当且仅当通过的迭代是空的时，Promise.all同步解析<br>2.异步，不然就要异步处理<br>  快速性<br>3.快速行为，如果任何元素被拒绝，则Promise.all被拒绝。</p><p>eg：1&amp;2=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var p = Promise.all([]); // will be immediately resolved</div><div class="line">var p2 = Promise.all([1337, <span class="string">"hi"</span>]); // non-promise values will be ignored, but the evaluation will be <span class="keyword">done</span> asynchronously</div><div class="line">console.log(p);</div><div class="line">console.log(p2)</div><div class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'the stack is now empty'</span>);</div><div class="line">    console.log(p2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logs</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: Array[0] &#125;</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125;</div><div class="line">// the stack is now empty</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: Array[2] &#125;</div></pre></td></tr></table></figure></p><p>eg:3=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise((resolve, reject) =&gt; &#123; </div><div class="line">  setTimeout(resolve, 1000, <span class="string">'one'</span>); </div><div class="line">&#125;); </div><div class="line">var p2 = new Promise((resolve, reject) =&gt; &#123; </div><div class="line">  setTimeout(resolve, 2000, <span class="string">'two'</span>); </div><div class="line">&#125;);</div><div class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  setTimeout(resolve, 3000, <span class="string">'three'</span>);</div><div class="line">&#125;);</div><div class="line">var p4 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  setTimeout(resolve, 4000, <span class="string">'four'</span>);</div><div class="line">&#125;);</div><div class="line">var p5 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  reject(<span class="string">'reject'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Promise.all([p1, p2, p3, p4, p5]).<span class="keyword">then</span>(values =&gt; &#123; </div><div class="line">  console.log(values);</div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  console.log(reason)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//From console:</div><div class="line">//<span class="string">"reject"</span></div><div class="line"></div><div class="line">//You can also use .catch</div><div class="line">Promise.all([p1, p2, p3, p4, p5]).<span class="keyword">then</span>(values =&gt; &#123; </div><div class="line">  console.log(values);</div><div class="line">&#125;).catch(reason =&gt; &#123; </div><div class="line">  console.log(reason)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//From console: </div><div class="line">//<span class="string">"reject"</span></div></pre></td></tr></table></figure></p><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h5><h6 id="用法-Promise-race-迭代"><a href="#用法-Promise-race-迭代" class="headerlink" title="用法 Promise.race(迭代)"></a>用法 Promise.race(迭代)</h6><p>1.如果通过的迭代是空的，则返回的promise将永远等待。<br>2.如果迭代包含一个或多个非承诺值和/或已经解决/拒绝的承诺，Promise.race 则将解析为在迭代中找到的这些值中的第一个。<br>3.也有异步性<br>eg:2=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var foreverPendingPromise = Promise.race([]);</div><div class="line">var alreadyResolvedProm = Promise.resolve(666);</div><div class="line"></div><div class="line">var arr = [foreverPendingPromise, alreadyResolvedProm, <span class="string">"non-Promise value"</span>];</div><div class="line">var arr2 = [foreverPendingPromise, <span class="string">"non-Promise value"</span>, Promise.resolve(666)];</div><div class="line">var p = Promise.race(arr);</div><div class="line">var p2 = Promise.race(arr2);</div><div class="line"></div><div class="line">console.log(p);</div><div class="line">console.log(p2);</div><div class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'the stack is now empty'</span>);</div><div class="line">    console.log(p);</div><div class="line">    console.log(p2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logs, <span class="keyword">in</span> order:</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125; </div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125; </div><div class="line">// the stack is now empty</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: 666 &#125;</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: <span class="string">"non-Promise value"</span> &#125;</div></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </div><div class="line">    setTimeout(resolve, 500, <span class="string">'one'</span>); </div><div class="line">&#125;);</div><div class="line">var p2 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </div><div class="line">    setTimeout(resolve, 100, <span class="string">'two'</span>); </div><div class="line">&#125;);</div><div class="line"></div><div class="line">Promise.race([p1, p2]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</div><div class="line">  console.log(value); // <span class="string">"two"</span></div><div class="line">  // Both resolve, but p2 is faster</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;Promise是一个构造函数。
该函数有一个函数参数
函数参数有两个参数 resolve reject ,分别为成功与失败之
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>different</title>
    <link href="http://yoursite.com/2017/12/12/different/"/>
    <id>http://yoursite.com/2017/12/12/different/</id>
    <published>2017-12-11T18:40:09.000Z</published>
    <updated>2018-03-16T09:25:17.417Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mouseover与mouseenter"><a href="#mouseover与mouseenter" class="headerlink" title="mouseover与mouseenter"></a>mouseover与mouseenter</h4><pre><code>mouseover 支持冒泡事件，鼠标移入到子元素也触发mouseover事件。mouseenter 不支持冒泡事件，鼠标移入到子元素不触发mouseenter事件。</code></pre><h4 id="b与strong，i与em"><a href="#b与strong，i与em" class="headerlink" title="b与strong，i与em"></a>b与strong，i与em</h4><p>strong表示强调，有语气加强的含义，使用阅读设备阅读时会重度<br>b则是展示强调内容</p><p>i为斜体，em表示强调的文本。 </p><h4 id="target-currentTarget"><a href="#target-currentTarget" class="headerlink" title="target,currentTarget"></a>target,currentTarget</h4><pre><code>e.target 指向触发事件监听的对象。e.currentTarget 指向添加监听事件的对象。ul.addEventListener(&apos;click&apos;,function(e){   let oLi1 = e.target     let oLi2 = e.currentTarget    console.log(oLi1)   //  被点击的li    console.log(oLi2)   // ul    console.og(oLi1===oLi2)  // false})在jQuery提供的on方法中，e.currentTarget与该方法接收的第二个参数有关$(this.play_el).on(&apos;click&apos;, &apos;li&apos;, self.changePlayNav.bind(self));changePlayNav(e){    let self = this;    let $cur = $(e.currentTarget); // li    console.log($(e.target));    console.log($cur,333);}</code></pre><h4 id="toLowerCase-toLocaleLowerCase"><a href="#toLowerCase-toLocaleLowerCase" class="headerlink" title="toLowerCase() toLocaleLowerCase()"></a>toLowerCase() toLocaleLowerCase()</h4><pre><code>后者针对 地区,用后者更严谨一些</code></pre><h4 id="link与-import-区别"><a href="#link与-import-区别" class="headerlink" title="link与@import 区别"></a>link与@import 区别</h4><pre><code>1. link是html标签，@import是css提供的2. link在浏览器加载同时加载，@import 在浏览器加载完成后加载3. link无兼容性问题，@import要css2.1以上才兼容4. link权重大于@import</code></pre><h4 id="ajax中-GET与POST区别"><a href="#ajax中-GET与POST区别" class="headerlink" title="ajax中 GET与POST区别"></a>ajax中 GET与POST区别</h4><pre><code>1. get 参数提交到url中，而post不会提交到url中。2. get请求发送的数据小 1kb,而post发送的数据大2M。3. get请求需要注意缓存的问题，post不用担心。4. get请求数据会被浏览器缓存起来，(有安全问题)，POST可以避免。</code></pre><h4 id="split与join区别"><a href="#split与join区别" class="headerlink" title="split与join区别"></a>split与join区别</h4><pre><code>split 将字符串分割成数组join  将数组组合成字符串</code></pre><h4 id="cookies-sessionStorage和localStorage-区别"><a href="#cookies-sessionStorage和localStorage-区别" class="headerlink" title="cookies,sessionStorage和localStorage 区别"></a>cookies,sessionStorage和localStorage 区别</h4><pre><code>1. cookies内存小4kb,localStorage内存大5M.2. cookies有时间限制，localStorage长期存储，sessionStorage关闭窗口清除3. cookies的api 封装困难。localStorage的api封装简单。</code></pre><h4 id="块级元素与行内元素的区别"><a href="#块级元素与行内元素的区别" class="headerlink" title="块级元素与行内元素的区别"></a>块级元素与行内元素的区别</h4><pre><code>行内元素:不单独成一行，不能设置宽高，padding/margin不能设置top/bottom块级元素:单独成一行，可以设置宽高，padding/margin都可用。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mouseover与mouseenter&quot;&gt;&lt;a href=&quot;#mouseover与mouseenter&quot; class=&quot;headerlink&quot; title=&quot;mouseover与mouseenter&quot;&gt;&lt;/a&gt;mouseover与mouseenter&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css6</title>
    <link href="http://yoursite.com/2017/11/29/css6/"/>
    <id>http://yoursite.com/2017/11/29/css6/</id>
    <published>2017-11-28T16:32:57.000Z</published>
    <updated>2018-03-20T14:20:21.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="form属性"><a href="#form属性" class="headerlink" title="form属性"></a>form属性</h4><pre><code>method属性：规定用于发送 form-data 的 HTTP 方法。实际上就是请求的方式。 name属性：表单的名称。 action属性：指定表单请求的路径 target属性：指定action的Url在哪里打开</code></pre><a id="more"></a><h5 id="method"><a href="#method" class="headerlink" title="method"></a>method</h5><pre><code>作用：定义表单提交数据时的方式取值：     1、get (默认值)          意义为：得到，获取          场合：向服务器要数据时使用          特点：               1、明文提交,所提交的数据时可以显示在地址栏上的-安全性较低               2、提交数据有大小限制-最大为2KB    2、post        意义：邮寄，邮递        场合：将数据提交给服务器处理时使用(有保密类型数据时)        特点：            1、隐式提交-所提交的内容是不会显示在地址栏上的，安全性较高            2、无大小限制    3、enctype        作用：编码类型，即表单数据进行编码的方式        允许表单将什么样的数据提交给服务器        取值：        1、application/x-www-form-urlencoded        默认值        允许将 普通字符，特殊字符，都提交给服务器，不允许提交 文件        2、multipart/form-data        允许 将文件提交给服务器        3、text/plain        只允许提交普通字符。特殊字符，文件等都无法提交</code></pre><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><pre><code>定义表单被提交时发生的动作提交给服务器处理程序的地址注意：通过 与服务器端人员交流 得到 action 的地址默认，提交给本页</code></pre><h5 id="target属性-gt-a标签相同"><a href="#target属性-gt-a标签相同" class="headerlink" title="target属性=&gt;a标签相同"></a>target属性=&gt;a标签相同</h5><pre><code>_blank：指定action的Url在新开的浏览器窗口中_parent：指定action的Url在父级浏览器窗口中_self：指定action的Url在当前浏览器窗口中_top：指定action的Url在顶级浏览器窗口中杀毒软件拦截请求一般会在新打开的页面拦截，也就是使用了target属性的“_blank”。默认情况也会是“_blank”，所以会被拦截到。不重新发开新的浏览器窗口，就不会拦截。所有解决办法将”_blank”属性改为“_self”就会解决此问题。</code></pre><h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><pre><code>autocomplete    on/off  规定是否使用输入字段的自动完成功能。autofocus    autofocus    规定输入字段在页面加载时是否获得焦点。（不适用于 type=&quot;hidden&quot;）checked    checked    规定此 input 元素首次加载时应当被选中。disabled    disabled    当 input 元素加载时禁用此元素。multiple    multiple    如果使用该属性，则允许一个以上的值。name    field_name    定义 input 元素的名称。pattern    regexp_pattern    规定输入字段的值的模式或格式。例如 pattern=&quot;[0-9]&quot; 表示输入值必须是 0 与 9 之间的数字。placeholder    text    规定帮助用户填写输入字段的提示。readonly    readonly    规定输入字段为只读。required    required    指示输入字段的值是必需的。type        button=&gt;按钮    checkbox=&gt;多选框    file=&gt;提交文件    hidden    image=&gt;图片    password=&gt;密码    radio=&gt;单选框    reset=&gt;重置    submit=&gt;提交    text=&gt;文本value    value    规定 input 元素的值。文本框与密码框                    文本框：明文显示用户输入的数据                         &lt;input type=&quot;text&quot;&gt;                    密码框：密文显示用户输入的数据                         &lt;input type=&quot;password&quot;&gt;                    属性                         1、name                              缩写：txt                              ex:                                   1、创建一个文本框，表示 接受 用户名称(Username)                                   &lt;input type=&quot;text&quot; name=&quot;txtUsername&quot;&gt;                                   2、创建一个密码框，表示 接受 用户密码(Userpwd)                                   &lt;input type=&quot;password&quot; name=&quot;txtUserpwd&quot;&gt;                         2、value                              1、表示控件的值                              2、表示控件的默认值                         3、maxlength                              限制输入的字符数                         4、readonly                              只读-只能看，不能改                              该属性只要出现在标记中，就是只读的意思，不需要给值               readonly 与 disabled 的区别                              1、readonly 只能看，不能改，但是可以被提交给服务器                              2、disabled 只能看，不能改，但是不能提交给服务器                    注意：对于input来讲，如果不写 type 或者 type值写错的时候，默认都是文本框               2、单选按钮和复选框                    单选按钮：type=&quot;radio&quot;                    复选框：type=&quot;checkbox&quot;                    属性：                         1、name                              定义名称                              radio缩写：rdo                              checkbox缩写：chk                              还可以对控件进行分组,一组单选按钮和复选框，名称必须相同                              对于单选按钮：一组中的单选按钮，最多只能有一个被选中                         2、checked                              设置默认被选中               3、按钮                    1、提交按钮                         功能固定化，负责将表中中的表单控件提交给服务器                         &lt;input type=&quot;submit&quot;&gt;                    2、重置按钮                         功能固定化，负责将所有表单控件的值恢复为初始值                         &lt;input type=&quot;reset&quot;&gt;                    3、普通按钮                         无功能，执行客户端的脚本(JS)                         &lt;input type=&quot;button&quot;&gt;                    属性：                         1、name                              缩写：btn                         2、value                              按钮上的显示文本               4、隐藏域 和 文件选择框                    1、隐藏域                         不希望被用户看见，但是要提交给服务器的信息                         &lt;input type=&quot;hidden&quot;&gt;                         name ：txt+功能名称                         value ：值                    2、文件选择框                         上传文件所用                         &lt;input type=&quot;file&quot;&gt;                         name : txt+功能名称     3、textarea - 多行文本域          作用：允许用户录入多行数据到表单控件中          语法：&lt;textarea&gt;&lt;/textarea&gt;          属性：               1、name                    缩写：txt+功能名称               2、readonly                    只读               3、cols                    指定文本区域的列数, 变相设置当前元素宽度               4、rows                    指定文本区域的行数，变相设置当前元素高度     4、选项框          1、分类               1、下拉选项框               2、滚动列表          2、语法               1 、&lt;select&gt;&lt;/select&gt; 创建选项框                    属性：                         1、name                              缩写：sel+功能名称                         2、size                             取值 大于1的话，则为滚动列表                              否则就是下拉选项框                         3、multiple                             设置多选,该属性出现在 &lt;select&gt;中，那么就允许多选(针对滚动列表)               2、&lt;option&gt;显示文本&lt;/option&gt; 选项                    属性：                         1、value                              选项的值                         2、selected                              预选中                              注意：如果不设置selected属性的话，那么选项框中的第一项会默认被选中。     5、其他元素          1、为控件分组               &lt;fieldset&gt;&lt;/fieldset&gt; : 为控件分组               &lt;legend&gt;&lt;/legend&gt; : 为分组指定一个标题          2、&lt;label&gt; 元素               功能：关联 文本 与表达元素的，点击文本时，如同点击表单元素一样               语法：                    &lt;label&gt;文本&lt;/label&gt;                    属性：                         for ：表示与该label相关联的表单控件元素的ID值&lt;input id=&quot;man&quot;  name=&quot;sex&quot;   value=&quot;男&quot;&gt;&lt;label  for=&quot;man&quot;&gt;男&lt;/label&gt;&lt;/input&gt;</code></pre><h5 id="button"><a href="#button" class="headerlink" title="button"></a>button</h5><pre><code>在 button 元素内部，您可以放置内容，比如文本或图像。这是该元素与使用 input 元素创建的按钮之间的不同之处。</code></pre><h5 id="button与input-type-button与type-submit"><a href="#button与input-type-button与type-submit" class="headerlink" title="button与input type=button与type=submit"></a>button与input type=button与type=submit</h5><pre><code>HTML &lt;button&gt; 和 input type=“button”的区别：1. &lt;button&gt;标签里可以放文本图片等内容，与&lt;input&gt;创建的按钮不同。2. &lt;input&gt;中的button通常与javascript一起使用启动脚本。如：&lt;input type=&quot;button&quot; value=&quot;点我&quot; onclick=&quot;msg()&quot;&gt; 。3. 如果在 HTML 表单中使用 &lt;button&gt; 元素，不同的浏览器可能会提交不同的按钮值。通常用&lt;input&gt;在 HTML 表单中创建按钮。input type=&quot;submit&quot; 和&quot;button&quot;的区别：1. button只是一个按钮，不写javascript什么也不会发生。2. submit点击后会自动提交form，除非写javascript来阻止。总结：在一个页面上画一个按钮，有四种办法：&lt;input type=&quot;button&quot; /&gt; 这就是一个按钮。如果你不写javascript 的话，按下去什么也不会发生。&lt;input type=&quot;submit&quot; /&gt; 这样的按钮用户点击之后会自动提交 form，除非你写了javascript 阻止它。&lt;button&gt; 这个按钮放在 form 中也会点击自动提交，比前两个的优点是按钮的内容不光可以有文字，还可以有图片等多媒体内容。（当然，前两个用图片背景也可以做到）。它的缺点是不同的浏览器得到的 value 值不同；可能还有其他的浏览器兼容问题。其他标签，例如 a, img, span, div，然后用图片把它伪装成一个按钮。</code></pre><h5 id="form表单提交onclick和onsubmit"><a href="#form表单提交onclick和onsubmit" class="headerlink" title="form表单提交onclick和onsubmit"></a>form表单提交onclick和onsubmit</h5><pre><code>  onsubmit只能表单上使用,提交表单前会触发, onclick是按钮等控件使用, 用来触发点击事件。在提交表单前，一般都会进行数据验证，可以选择在submit按钮上的onclick中验证,也可以在onsubmit中验证。但是onclick比onsubmit更早的被触发。    提交过程1、用户点击按钮 ----&gt;2、触发onclick事件  ----&gt; 3、onclick返回true或未处理onclick ----&gt; 4、触发onsubmit事件  ----&gt; 5、onsubmit未处理或返回true  ------&gt; 6、提交表单. onsubmit处理函数返回false，onclick函数返回false，都不会引起表单提交。</code></pre><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><pre><code>multiple  multiple  规定可选择多个选项。size  number  规定下拉列表中可见选项的数目。注意两种select就好了</code></pre><h4 id="details"><a href="#details" class="headerlink" title="details"></a>details</h4><pre><code>&lt;details&gt;&lt;summary&gt;Copyright 2011.&lt;/summary&gt;&lt;p&gt;All pages and graphics on this web site are the property of W3School.&lt;/p&gt;&lt;/details&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h3&gt;&lt;h4 id=&quot;form属性&quot;&gt;&lt;a href=&quot;#form属性&quot; class=&quot;headerlink&quot; title=&quot;form属性&quot;&gt;&lt;/a&gt;form属性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;method属性：规定用于发送 form-data 的 HTTP 方法。实际上就是请求的方式。 
name属性：表单的名称。 
action属性：指定表单请求的路径 
target属性：指定action的Url在哪里打开
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css5</title>
    <link href="http://yoursite.com/2017/11/28/css5/"/>
    <id>http://yoursite.com/2017/11/28/css5/</id>
    <published>2017-11-28T06:49:11.000Z</published>
    <updated>2017-11-28T16:13:59.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用标签与属性"><a href="#常用标签与属性" class="headerlink" title="常用标签与属性"></a>常用标签与属性</h3><a id="more"></a><h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><pre><code>charset    char_encoding    HTML5 中不支持。规定被链接文档的字符集。coords    coordinates    HTML5 中不支持。规定链接的坐标。download    filename    规定被下载的超链接目标。href    URL    规定链接指向的页面的 URL。hreflang    language_code    规定被链接文档的语言。media    media_query    规定被链接文档是为何种媒介/设备优化的。name    section_name    HTML5 中不支持。规定锚的名称。rel    text    规定当前文档与被链接文档之间的关系。rev    text    HTML5 中不支持。规定被链接文档与当前文档之间的关系。shape    defaultrectcirclepolyHTML5 中不支持。规定链接的形状。target        _blank    _parent    _self    _top    framename规定在何处打开链接文档。type    MIME type    规定被链接文档的的 MIME 类型。</code></pre><h4 id="target-gt-也就是窗口打开方式"><a href="#target-gt-也就是窗口打开方式" class="headerlink" title="target=&gt;也就是窗口打开方式"></a>target=&gt;也就是窗口打开方式</h4><pre><code>_blank    在新窗口中打开被链接文档。_self    默认。在相同的框架中打开被链接文档。_parent    在父框架集中打开被链接文档。_top    在整个窗口中打开被链接文档。framename    在指定的框架中打开被链接文档。理解：  网页page分成frame1、frame2，frame1又分成frame1-1、frame1-2，frame1-1又分成frame1-1-1，frame1-1-2。  然后你在frame1-1-1中放了一个链接。  如果这个链接的target=&quot;_self&quot;，那么链接会在frame1-1-1中打开。  如果target=&quot;_parent&quot;，那么链接会在frame1-1中打开。  如果target=&quot;_top&quot;，那么链接会在page中打开。</code></pre><h4 id="href-gt-链接地址"><a href="#href-gt-链接地址" class="headerlink" title="href=&gt;链接地址"></a>href=&gt;链接地址</h4><h5 id="URL-gt-绝对-URL-相对-URL"><a href="#URL-gt-绝对-URL-相对-URL" class="headerlink" title="URL=&gt;绝对 URL\相对 URL"></a>URL=&gt;绝对 URL\相对 URL</h5><h5 id="锚-gt-指向页面中的锚"><a href="#锚-gt-指向页面中的锚" class="headerlink" title="锚 =&gt; 指向页面中的锚"></a>锚 =&gt; 指向页面中的锚</h5><pre><code>注意点: 配合name或者id使用,就跳转到具体的id/name了=&gt;一般都是锚点不在页面中(overflow了)</code></pre><h5 id="tel-gt-移动端-wtai"><a href="#tel-gt-移动端-wtai" class="headerlink" title="tel=&gt;移动端\wtai"></a>tel=&gt;移动端\wtai</h5><pre><code>&lt;a href=&quot;tel:12345678910&quot;&gt;拨打电话&lt;/a&gt;&lt;a href=&quot;wtai://wp/mc;10086&quot;&gt;10086&lt;/a&gt;</code></pre><h5 id="sms-gt-移动端"><a href="#sms-gt-移动端" class="headerlink" title="sms=&gt;移动端"></a>sms=&gt;移动端</h5><pre><code>&lt;a href=&quot;sms:12345678910?body=发送短信&quot;&gt;发送短信&lt;/a&gt;</code></pre><h5 id="mailto"><a href="#mailto" class="headerlink" title="mailto"></a>mailto</h5><pre><code>&lt;a href=&quot;mailto:jk.2013@qq.com?cc=&quot;sipallan@163.com&amp;bbc=&quot;joe5213@qq.com&amp;subject=这是一封邮件&amp;body=我想你&quot;&gt;发送邮件&lt;/a&gt;</code></pre><h5 id="Android-Market"><a href="#Android-Market" class="headerlink" title="Android Market"></a>Android Market</h5><pre><code>&lt;a href=&quot;market://search?q=MyApp&quot;&gt;MyApp&lt;/a&gt;</code></pre><h5 id="地图GPS定位"><a href="#地图GPS定位" class="headerlink" title="地图GPS定位"></a>地图GPS定位</h5><pre><code>&lt;a href=&quot;geopoint:108.954823,34.275891&quot;&gt;我的位置&lt;/a&gt;</code></pre><h4 id="love-hate"><a href="#love-hate" class="headerlink" title="love hate"></a>love hate</h4><pre><code>执行顺序应该遵循link,visited,hover,active</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用标签与属性&quot;&gt;&lt;a href=&quot;#常用标签与属性&quot; class=&quot;headerlink&quot; title=&quot;常用标签与属性&quot;&gt;&lt;/a&gt;常用标签与属性&lt;/h3&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css4</title>
    <link href="http://yoursite.com/2017/11/27/css4/"/>
    <id>http://yoursite.com/2017/11/27/css4/</id>
    <published>2017-11-27T15:53:15.000Z</published>
    <updated>2018-03-20T14:20:13.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="居中属性"><a href="#居中属性" class="headerlink" title="居中属性"></a>居中属性</h3><h4 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h4><pre><code>text-align 属性规定元素中的文本的水平对齐方式。文本=&gt;用于行内元素和块状元素中的文本left    把文本排列到左边。默认值：由浏览器决定。right    把文本排列到右边。center    把文本排列到中间。justify    实现两端对齐文本效果。inherit    规定应该从父元素继承 text-align 属性的值。</code></pre><a id="more"></a><h4 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h4><pre><code>baseline    默认。元素放置在父元素的基线上。sub    垂直对齐文本的下标。super    垂直对齐文本的上标top    把元素的顶端与行中最高元素的顶端对齐text-top    把元素的顶端与父元素字体的顶端对齐middle    把此元素放置在父元素的中部。bottom    把元素的顶端与行中最低的元素的顶端对齐。text-bottom    把元素的底端与父元素字体的底端对齐。length     %    使用 &quot;line-height&quot; 属性的百分比值来排列此元素。允许使用负值。inherit    规定应该从父元素继承 vertical-align 属性的值。</code></pre><h5 id="vertical-align使用条件"><a href="#vertical-align使用条件" class="headerlink" title="vertical-align使用条件"></a>vertical-align使用条件</h5><pre><code>只有一个元素属于inline或是inline-block（table-cell也可以理解为inline-block水平）水平，其身上的vertical-align属性才会起作用。(块状元素设置为inline-block,也不能使用vertical-align,因为其本质还是block;但是tabel-cell可以)</code></pre><h5 id="父元素设置line-height"><a href="#父元素设置line-height" class="headerlink" title="父元素设置line-height"></a>父元素设置line-height</h5><pre><code>vertical-align相对于父元素作为参照;top=&gt;baseline=&gt;middle=&gt;bottom;越来越低，差不多以四分之一为间隔吧，没有合适的就设置值。</code></pre><h6 id="父元素-gt-行内元素"><a href="#父元素-gt-行内元素" class="headerlink" title="父元素=&gt;行内元素"></a>父元素=&gt;行内元素</h6><pre><code>不必设置line-height，字体会撑起一个适合子元素作用的高度</code></pre><h6 id="父元素-gt-块状元素"><a href="#父元素-gt-块状元素" class="headerlink" title="父元素=&gt;块状元素"></a>父元素=&gt;块状元素</h6><pre><code>必须设置line-height，否则对其设置vertical-align无效</code></pre><h5 id="父元素没有设置line-height-i-gt-nline-inline-block子元素之间对齐"><a href="#父元素没有设置line-height-i-gt-nline-inline-block子元素之间对齐" class="headerlink" title="父元素没有设置line-height=i&gt;nline/inline-block子元素之间对齐"></a>父元素没有设置line-height=i&gt;nline/inline-block子元素之间对齐</h5><pre><code>top=&gt;顶端对齐baseline=&gt;基线对齐middle=&gt;中间对齐bottom=&gt;底部对齐默认应该是两个都为 baseline,一个以另一个为基准(小的相对大的，前提差距较大)。</code></pre><h4 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h4><pre><code> 用于设置单行文字垂直居中height=line-heightnormal    默认。设置合理的行间距。number    设置数字，此数字会与当前的字体尺寸相乘来设置行间距。length    设置固定的行间距。%    基于当前字体尺寸的百分比行间距。=&gt;这个要特殊记一下inherit    规定应该从父元素继承 line-height 属性的值。number与%区别 (1.2与1.2em)1.2em:计算出父元素的具体数值，被继承下去，相当于120%;父元素font-size:16px;16*1.2=19.2px=&gt;这个具体的数值会被继承。      子元素不会随相关的font-size做出相关的比例缩放。1.2 number:系数被继承。父元素font-size:16px;子元素font-size:12px;12*1.2=14.4px=&gt;这个系数会被继承。      子元素会随相关的font-size做出相关的比例缩放。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;居中属性&quot;&gt;&lt;a href=&quot;#居中属性&quot; class=&quot;headerlink&quot; title=&quot;居中属性&quot;&gt;&lt;/a&gt;居中属性&lt;/h3&gt;&lt;h4 id=&quot;text-align&quot;&gt;&lt;a href=&quot;#text-align&quot; class=&quot;headerlink&quot; title=&quot;text-align&quot;&gt;&lt;/a&gt;text-align&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;text-align 属性规定元素中的文本的水平对齐方式。
文本=&amp;gt;用于行内元素和块状元素中的文本

left    把文本排列到左边。默认值：由浏览器决定。
right    把文本排列到右边。
center    把文本排列到中间。
justify    实现两端对齐文本效果。
inherit    规定应该从父元素继承 text-align 属性的值。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css3</title>
    <link href="http://yoursite.com/2017/11/27/css3/"/>
    <id>http://yoursite.com/2017/11/27/css3/</id>
    <published>2017-11-27T03:07:53.000Z</published>
    <updated>2018-03-18T12:47:28.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css中各种居中方法总结"><a href="#css中各种居中方法总结" class="headerlink" title="css中各种居中方法总结"></a>css中各种居中方法总结</h3><pre><code>水平居中=&gt;行内元素、块状元素块状元素=&gt;定宽、不定宽</code></pre><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><h5 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h5><pre><code>text-align:center;=&gt;设置文本居中的方式。用于行内元素水平居中;但是也可以用来使块级元素中的文本水平居中;</code></pre><a id="more"></a><h5 id="块状元素居中"><a href="#块状元素居中" class="headerlink" title="块状元素居中"></a>块状元素居中</h5><h6 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h6><pre><code>margin:0 auto;=&gt;width为固定值时可用;</code></pre><h6 id="position"><a href="#position" class="headerlink" title="position"></a>position</h6><pre><code>设置子元素position为absolute，left:50%;1.(定宽高)=&gt;margin-left:-50%;(后面的-50%是相对子元素的具体数值);2.(定宽高)=&gt;left=right;top=bottom;3.(不定宽高)=&gt;transform:translateX(-50%);4.(不定宽高)=&gt;left:0;right:0;top:0;bottom:0;margin:auto;</code></pre><h6 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h6><pre><code>justify-content: center;(不定宽高)</code></pre><h6 id="table"><a href="#table" class="headerlink" title="table"></a>table</h6><pre><code>margin:0 auto;=&gt;可以使子元素宽度不固定时使用，原理应该就是table\table-cell元素具有包裹性(个人观点)</code></pre><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><h5 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h5><pre><code>height=line-height;只适用于单行文本</code></pre><h5 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h5><pre><code>要设置父元素为display:table\table-cell;才可以使用vertical-align</code></pre><h5 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h5><pre><code>button标签中的块级元素默认是垂直居中的</code></pre><h5 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h5><pre><code>align-tiems:center;</code></pre><h5 id="pisition方法同水平居中"><a href="#pisition方法同水平居中" class="headerlink" title="pisition方法同水平居中"></a>pisition方法同水平居中</h5><p>####水平垂直居中</p><pre><code>text-align+line-height;button居中;table-cell居中;margin固定宽高居中;负margin居中;transform居中;绝对定位居中;flex居中;  不确定宽高居中(绝对定位百分数);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;css中各种居中方法总结&quot;&gt;&lt;a href=&quot;#css中各种居中方法总结&quot; class=&quot;headerlink&quot; title=&quot;css中各种居中方法总结&quot;&gt;&lt;/a&gt;css中各种居中方法总结&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;水平居中=&amp;gt;行内元素、块状元素
块状元素=&amp;gt;定宽、不定宽
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h4&gt;&lt;h5 id=&quot;行内元素&quot;&gt;&lt;a href=&quot;#行内元素&quot; class=&quot;headerlink&quot; title=&quot;行内元素&quot;&gt;&lt;/a&gt;行内元素&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;text-align:center;=&amp;gt;
设置文本居中的方式。用于行内元素水平居中;
但是也可以用来使块级元素中的文本水平居中;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css2</title>
    <link href="http://yoursite.com/2017/11/27/css2/"/>
    <id>http://yoursite.com/2017/11/27/css2/</id>
    <published>2017-11-26T19:21:21.000Z</published>
    <updated>2017-11-27T18:19:04.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS中可以和不可以继承的属性"><a href="#CSS中可以和不可以继承的属性" class="headerlink" title="CSS中可以和不可以继承的属性"></a>CSS中可以和不可以继承的属性</h3><h4 id="有继承性属性"><a href="#有继承性属性" class="headerlink" title="有继承性属性"></a>有继承性属性</h4><pre><code>字体、文字、列表、表格  文字列表可生光</code></pre><a id="more"></a><h5 id="文字系列属性"><a href="#文字系列属性" class="headerlink" title="文字系列属性"></a>文字系列属性</h5><pre><code>text-indent：文本缩进text-align：文本水平对齐line-height：行高word-spacing：增加或减少单词间的空白（即字间隔）letter-spacing：增加或减少字符间的空白（字符间距）text-transform：控制文本大小写direction：规定文本的书写方向color：文本颜色</code></pre><h5 id="字体系列属性"><a href="#字体系列属性" class="headerlink" title="字体系列属性"></a>字体系列属性</h5><pre><code>font：组合字体font-family：规定元素的字体系列font-weight：设置字体的粗细font-size：设置字体的尺寸font-style：定义字体的风格font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写字体的字母与其余文本相比，其字体尺寸更小。font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</code></pre><h5 id="列表布局属性"><a href="#列表布局属性" class="headerlink" title="列表布局属性"></a>列表布局属性</h5><pre><code>list-style-type、list-style-image、list-style-position、list-style</code></pre><h5 id="表格布局属性"><a href="#表格布局属性" class="headerlink" title="表格布局属性"></a>表格布局属性</h5><pre><code>caption-side、border-collapse、border-spacing、empty-cells、table-layout</code></pre><h5 id="元素可见性：visibility"><a href="#元素可见性：visibility" class="headerlink" title="元素可见性：visibility"></a>元素可见性：visibility</h5><h5 id="生成内容属性：quotes"><a href="#生成内容属性：quotes" class="headerlink" title="生成内容属性：quotes"></a>生成内容属性：quotes</h5><h5 id="光标属性：cursor"><a href="#光标属性：cursor" class="headerlink" title="光标属性：cursor"></a>光标属性：cursor</h5><h4 id="无继承性的属性"><a href="#无继承性的属性" class="headerlink" title="无继承性的属性"></a>无继承性的属性</h4><pre><code>d文盒背定生轮</code></pre><h5 id="display：规定元素应该生成的框的类型"><a href="#display：规定元素应该生成的框的类型" class="headerlink" title="display：规定元素应该生成的框的类型"></a>display：规定元素应该生成的框的类型</h5><h5 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h5><pre><code>vertical-align：垂直文本对齐text-decoration：规定添加到文本的装饰text-shadow：文本阴影效果white-space：空白符的处理unicode-bidi：设置文本的方向</code></pre><h5 id="盒子模型的属性"><a href="#盒子模型的属性" class="headerlink" title="盒子模型的属性"></a>盒子模型的属性</h5><pre><code>width、height、padding、border、margin</code></pre><h5 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h5><pre><code>background、background-color、background-image、background-repeat、background-position、background-attachment</code></pre><h5 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h5><pre><code>float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</code></pre><h5 id="生成内容属性"><a href="#生成内容属性" class="headerlink" title="生成内容属性"></a>生成内容属性</h5><pre><code>content、counter-reset、counter-increment</code></pre><h5 id="轮廓样式属性"><a href="#轮廓样式属性" class="headerlink" title="轮廓样式属性"></a>轮廓样式属性</h5><pre><code>outline-style、outline-width、outline-color、outline</code></pre><h4 id="内联元素可以继承的属性"><a href="#内联元素可以继承的属性" class="headerlink" title="内联元素可以继承的属性"></a>内联元素可以继承的属性</h4><pre><code>字体系列属性除text-indent、text-align之外的文本系列属性</code></pre><h4 id="块级元素可以继承的属性"><a href="#块级元素可以继承的属性" class="headerlink" title="块级元素可以继承的属性"></a>块级元素可以继承的属性</h4><pre><code>text-indent、text-align</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS中可以和不可以继承的属性&quot;&gt;&lt;a href=&quot;#CSS中可以和不可以继承的属性&quot; class=&quot;headerlink&quot; title=&quot;CSS中可以和不可以继承的属性&quot;&gt;&lt;/a&gt;CSS中可以和不可以继承的属性&lt;/h3&gt;&lt;h4 id=&quot;有继承性属性&quot;&gt;&lt;a href=&quot;#有继承性属性&quot; class=&quot;headerlink&quot; title=&quot;有继承性属性&quot;&gt;&lt;/a&gt;有继承性属性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;字体、文字、列表、表格  文字列表可生光
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css1</title>
    <link href="http://yoursite.com/2017/11/27/css1/"/>
    <id>http://yoursite.com/2017/11/27/css1/</id>
    <published>2017-11-26T17:14:45.000Z</published>
    <updated>2018-03-20T14:19:54.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="css盒子模型"><a href="#css盒子模型" class="headerlink" title="css盒子模型"></a>css盒子模型</h3><pre><code>content，padding，border，margin;盒子模型属性默认不继承。</code></pre><h4 id="ie盒子"><a href="#ie盒子" class="headerlink" title="ie盒子"></a>ie盒子</h4><pre><code>border-box:content包括content，padding，border</code></pre><h4 id="w3c盒子"><a href="#w3c盒子" class="headerlink" title="w3c盒子"></a>w3c盒子</h4><pre><code>content-box: content只包括content</code></pre><a id="more"></a><h4 id="盒子模型5个层次"><a href="#盒子模型5个层次" class="headerlink" title="盒子模型5个层次"></a>盒子模型5个层次</h4><p>border=&gt;content&amp;padding=&gt;background-image=&gt;background-color=&gt;margin</p><h4 id="width"><a href="#width" class="headerlink" title="width"></a>width</h4><pre><code>auto    默认值。浏览器可计算出实际的宽度。length    使用 px、cm 等单位定义宽度。%    定义基于包含块（父元素）宽度的百分比宽度。inherit    规定应该从父元素继承 width 属性的值。</code></pre><h5 id="width-auto"><a href="#width-auto" class="headerlink" title="width: auto"></a>width: auto</h5><pre><code>子元素（包括content+padding+border+margin）撑满整个父元素的content区域。子元素有margin、border、padding时，会减去子元素content区域相对应的width值父元素的content = 子元素（content + padding + border + margin )</code></pre><h5 id="width-100"><a href="#width-100" class="headerlink" title="width: 100%"></a>width: 100%</h5><pre><code>强制将子元素的content区域 撑满 父元素的content区域子元素有margin、border、padding时，不改变子元素content区域的width，而是溢出父盒子，保持原有值父元素的content = 子元素的content(前提是content-box，即默认w3c盒子模型)</code></pre><h4 id="height"><a href="#height" class="headerlink" title="height"></a>height</h4><pre><code>auto    默认。浏览器会计算出实际的高度。length    使用 px、cm 等单位定义高度。%    基于包含它的块级对象的百分比高度。inherit    规定应该从父元素继承 height 属性的值。</code></pre><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><pre><code>length    规定以具体单位计的填充值，比如像素、厘米等。默认值是 0px%    规定基于父元素的宽度的百分比的填充inherit    指定应该从父元素继承padding</code></pre><h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h4><pre><code>auto    浏览器计算外边距。length    规定以具体单位计的外边距值，比如像素、厘米等。默认值是 0px。%    规定基于父元素的宽度的百分比的外边距。inherit    规定应该从父元素继承外边距。对于行内元素margin-top/margin-bottom无效。</code></pre><h4 id="padding与margin的区别"><a href="#padding与margin的区别" class="headerlink" title="padding与margin的区别"></a>padding与margin的区别</h4><pre><code>padding用来隔开元素与内容的间隔margin用来隔开元素与元素的间隔</code></pre><h4 id="注意padding-top-bottom、margin-top-bottom"><a href="#注意padding-top-bottom、margin-top-bottom" class="headerlink" title="注意padding-top/bottom、margin-top/bottom"></a>注意padding-top/bottom、margin-top/bottom</h4><pre><code>注意padding-top/bottom、margin-top/bottom设置百分比(%),是相对父元素width。eg:设置移动端正方形图片    height：1px;    width:100%;    padding-top:100%; =&gt;相对父元素width,所以就为正方形了。eg:元素的竖向百分比相对于容器的高度吗？    不对。height相对容器高度，padding-top/bottom、margin-top/bottom相对容器宽度。</code></pre><h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><pre><code>border:border-width border-style border-color;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;css盒子模型&quot;&gt;&lt;a href=&quot;#css盒子模型&quot; class=&quot;headerlink&quot; title=&quot;css盒子模型&quot;&gt;&lt;/a&gt;css盒子模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;content，padding，border，margin;

盒子模型属性默认不继承。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;ie盒子&quot;&gt;&lt;a href=&quot;#ie盒子&quot; class=&quot;headerlink&quot; title=&quot;ie盒子&quot;&gt;&lt;/a&gt;ie盒子&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;border-box:content包括content，padding，border
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;w3c盒子&quot;&gt;&lt;a href=&quot;#w3c盒子&quot; class=&quot;headerlink&quot; title=&quot;w3c盒子&quot;&gt;&lt;/a&gt;w3c盒子&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;content-box: content只包括content
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>type</title>
    <link href="http://yoursite.com/2017/11/22/type/"/>
    <id>http://yoursite.com/2017/11/22/type/</id>
    <published>2017-11-21T16:28:17.000Z</published>
    <updated>2017-11-21T16:56:36.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>Number，String，Boolean，Null，Undefined</p><h4 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h4><p>Object</p><a id="more"></a><p>eg: typeof 可以检测出的数据类型</p><p>number，string，boolean，undefined，object，function</p><p>eg: 如何检测Array</p><p>X instanceof Array;Object.prototype.toString().call(X).slice(8,-1).toLowerCase();isArray(X);</p><h4 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h4><h5 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h5><p>number，string，boolean，undefined</p><h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><p>object，array，function, null</p><p>eg: 值类型与引用类型区别</p><p>会不会因为相互赋值而相互影响</p><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><p>Number，String，Boolean，Object，Array，Function，Error，RegExp，Date</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h3&gt;&lt;h4 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h4&gt;&lt;p&gt;Number，String，Boolean，Null，Undefined&lt;/p&gt;
&lt;h4 id=&quot;混合类型&quot;&gt;&lt;a href=&quot;#混合类型&quot; class=&quot;headerlink&quot; title=&quot;混合类型&quot;&gt;&lt;/a&gt;混合类型&lt;/h4&gt;&lt;p&gt;Object&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>position</title>
    <link href="http://yoursite.com/2017/11/21/position/"/>
    <id>http://yoursite.com/2017/11/21/position/</id>
    <published>2017-11-21T15:04:33.000Z</published>
    <updated>2017-12-26T09:31:29.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><h4 id="position的值"><a href="#position的值" class="headerlink" title="position的值"></a>position的值</h4><p>static，relative，absolute，fixed</p><h3 id="普通流"><a href="#普通流" class="headerlink" title="普通流"></a>普通流</h3><h4 id="normal-flow"><a href="#normal-flow" class="headerlink" title="normal flow"></a>normal flow</h4><p>指语言文本从左到右，从上到下显示，这是传统HTML文档的文本布局。<br>浮动(float)、绝对定位(absolute)、固定定位(fixed)三种方式定位会脱离文档流。</p><a id="more"></a><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>默认值</p><h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>相对本身定位<br>不脱离文档流<br>具有偏移属性和z-index属性</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>相对第一个position不为static的祖先元素<br>脱离文档流(完全)<br>具有偏移属性和z-index属性</p><h5 id="破坏性：-高度塌陷"><a href="#破坏性：-高度塌陷" class="headerlink" title="破坏性： 高度塌陷"></a>破坏性： 高度塌陷</h5><h5 id="包裹性：-元素宽度会缩小到内容大小"><a href="#包裹性：-元素宽度会缩小到内容大小" class="headerlink" title="包裹性： 元素宽度会缩小到内容大小"></a>包裹性： 元素宽度会缩小到内容大小</h5><h5 id="跟随性：-不设置偏移，位置不会变"><a href="#跟随性：-不设置偏移，位置不会变" class="headerlink" title="跟随性： 不设置偏移，位置不会变"></a>跟随性： 不设置偏移，位置不会变</h5><h5 id="悬浮性：-会遮挡下方的页面内容"><a href="#悬浮性：-会遮挡下方的页面内容" class="headerlink" title="悬浮性： 会遮挡下方的页面内容"></a>悬浮性： 会遮挡下方的页面内容</h5><h4 id="fixd"><a href="#fixd" class="headerlink" title="fixd"></a>fixd</h4><p>相对窗口进行定位。<br>其余与absolute相同</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;position&quot;&gt;&lt;a href=&quot;#position&quot; class=&quot;headerlink&quot; title=&quot;position&quot;&gt;&lt;/a&gt;position&lt;/h3&gt;&lt;h4 id=&quot;position的值&quot;&gt;&lt;a href=&quot;#position的值&quot; class=&quot;headerlink&quot; title=&quot;position的值&quot;&gt;&lt;/a&gt;position的值&lt;/h4&gt;&lt;p&gt;static，relative，absolute，fixed&lt;/p&gt;
&lt;h3 id=&quot;普通流&quot;&gt;&lt;a href=&quot;#普通流&quot; class=&quot;headerlink&quot; title=&quot;普通流&quot;&gt;&lt;/a&gt;普通流&lt;/h3&gt;&lt;h4 id=&quot;normal-flow&quot;&gt;&lt;a href=&quot;#normal-flow&quot; class=&quot;headerlink&quot; title=&quot;normal flow&quot;&gt;&lt;/a&gt;normal flow&lt;/h4&gt;&lt;p&gt;指语言文本从左到右，从上到下显示，这是传统HTML文档的文本布局。&lt;br&gt;浮动(float)、绝对定位(absolute)、固定定位(fixed)三种方式定位会脱离文档流。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
