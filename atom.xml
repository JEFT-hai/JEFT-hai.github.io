<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JEFT</title>
  
  <subtitle>学习是苦根上长出来的甜果</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-24T20:17:51.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JEFT-hai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>build</title>
    <link href="http://yoursite.com/2018/03/24/build/"/>
    <id>http://yoursite.com/2018/03/24/build/</id>
    <published>2018-03-24T15:58:12.000Z</published>
    <updated>2018-03-24T20:17:51.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一下上线过程"><a href="#记录一下上线过程" class="headerlink" title="记录一下上线过程"></a>记录一下上线过程</h3><h4 id="pm2-gt-维持命令行关闭但是server不关闭"><a href="#pm2-gt-维持命令行关闭但是server不关闭" class="headerlink" title="pm2 =&gt; 维持命令行关闭但是server不关闭"></a>pm2 =&gt; 维持命令行关闭但是server不关闭</h4><p>启动 pm2 start …<br>关闭 pm2 stop …<br>查看项目 pm2 list </p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="放在server下的views下"><a href="#放在server下的views下" class="headerlink" title="放在server下的views下"></a>放在server下的views下</h5><p> app.js中<br> var ejs = require(‘ejs’); //并下载ejs<br> // view engine setup<br> app.set(‘views’, path.join(<strong>dirname, ‘views’));<br> app.engine(‘.html’,ejs.</strong>express);<br> app.set(‘view engine’, ‘html’);</p><p>这时就能访问 服务器:server端口号 =&gt; 就是views中html页面</p><h5 id="html不放在server中-eg-nginx的html下"><a href="#html不放在server中-eg-nginx的html下" class="headerlink" title="html不放在server中(eg:nginx的html下)"></a>html不放在server中(eg:nginx的html下)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;</div><div class="line">        server_name imooc.minghai.shop;</div><div class="line">        <span class="comment"># root /usr/local/nginx/html/imooc;</span></div><div class="line">        <span class="comment"># index login.html index.html;</span></div><div class="line"></div><div class="line">       <span class="comment"># if ($host ~ ^(m|game|admin|imooc)\.minghai\.shop$)</span></div><div class="line">       <span class="comment"># &#123;</span></div><div class="line">        <span class="comment">#     set $erji $1;</span></div><div class="line">         <span class="comment">#    rewrite ^(.*)$ /$erji$1 last;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line">        location / &#123;</div><div class="line">            root /usr/<span class="built_in">local</span>/nginx/html/imooc;  html地址</div><div class="line">            index index.html;</div><div class="line">或</div><div class="line">            proxy_pass http://127.0.0.1:3000/ html放入server下</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /imooc/users/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/users/;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        location /users/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/users/;</div><div class="line">        &#125;</div><div class="line">        location /cart/ &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/cart/;</div><div class="line">        &#125;</div><div class="line">        location /goods/list &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/goods/list;</div><div class="line">        &#125;        </div><div class="line">        location /goods/addCart &#123;</div><div class="line">             proxy_pass http://127.0.0.1:3000/goods/addCart;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;记录一下上线过程&quot;&gt;&lt;a href=&quot;#记录一下上线过程&quot; class=&quot;headerlink&quot; title=&quot;记录一下上线过程&quot;&gt;&lt;/a&gt;记录一下上线过程&lt;/h3&gt;&lt;h4 id=&quot;pm2-gt-维持命令行关闭但是server不关闭&quot;&gt;&lt;a href=&quot;#pm2-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ie</title>
    <link href="http://yoursite.com/2018/03/21/ie/"/>
    <id>http://yoursite.com/2018/03/21/ie/</id>
    <published>2018-03-20T16:00:43.000Z</published>
    <updated>2018-03-22T12:28:12.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结一下ie兼容性问题"><a href="#总结一下ie兼容性问题" class="headerlink" title="总结一下ie兼容性问题"></a>总结一下ie兼容性问题</h3><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ol><li>ie9及以下 a标签下的img会有黑色边框 =&gt; a img{border:0px;}</li><li>a标签 点击后有 虚框 a{outline:none;}</li><li>transform 要加啊前缀-ms-transform js=&gt;msTransfrom</li><li>input radio 在ie下样式难看，不和chrome一样，可以用lable方法写样式将input隐藏<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.select-type label&#123;</div><div class="line">position: relative;</div><div class="line">display: inline-block;</div><div class="line">padding-left: 20px;</div><div class="line">line-height: 20px;</div><div class="line">&#125;</div><div class="line">.select-type label:before&#123;</div><div class="line">position: absolute;</div><div class="line">content: <span class="string">''</span>;</div><div class="line">height: 14px;</div><div class="line">width: 14px;</div><div class="line">border-radius: 50%;</div><div class="line">border:1px solid <span class="comment">#666;</span></div><div class="line">box-sizing: border-box;</div><div class="line">background-color: <span class="comment">#dedede;</span></div><div class="line">left:0;</div><div class="line">top:3px;</div><div class="line">&#125;</div><div class="line">.select-type input:checked+label:after &#123;</div><div class="line">position: absolute;</div><div class="line">content: <span class="string">''</span>;</div><div class="line">width: 8px;</div><div class="line">height: 8px;</div><div class="line">background: <span class="comment">#666;</span></div><div class="line">border-radius: 50%;</div><div class="line">left: 3px;</div><div class="line">top:6px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"select-type"</span>&gt;</div><div class="line">&lt;input id=<span class="string">"gnjp_single_trip"</span> name=<span class="string">"flighttype"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> checked autocomplete=<span class="string">"off"</span>&gt;</div><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">"gnjp_single_trip"</span>&gt;&lt;span&gt;单程&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;input id=<span class="string">"gnjp_round_trip"</span> name=<span class="string">"flighttype"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> autocomplete=<span class="string">"off"</span>&gt;</div><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">"gnjp_round_trip"</span>&gt;&lt;span&gt;往返&lt;/span&gt;&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><ol><li><p>toTop document.documentElement.scrollTop = document.body.scrollTop = 0;</p></li><li><p>事件绑定 attachEvent addEventListener</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="built_in">bind</span>(elem,<span class="built_in">type</span>,fn)&#123;</div><div class="line"><span class="keyword">if</span>(elem.addEventListener)&#123;</div><div class="line">elem.addEventListener(<span class="built_in">type</span>,fn,<span class="literal">false</span>)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">elem.attachEvent(<span class="string">'on'</span>+<span class="built_in">type</span>,fn)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>ie9及以下不支持 classList</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!(<span class="string">"classList"</span> <span class="keyword">in</span> document.documentElement)) &#123;  </div><div class="line">    Object.defineProperty(HTMLElement.prototype, <span class="string">'classList'</span>, &#123;  </div><div class="line">        get: <span class="function"><span class="title">function</span></span>() &#123;  </div><div class="line">            var self = this;  </div><div class="line">            <span class="keyword">function</span> update(fn) &#123;  </div><div class="line">                <span class="built_in">return</span> <span class="keyword">function</span>(value) &#123;  </div><div class="line">                    var classes = self.className.split(/\s+/g),  </div><div class="line">                        index = classes.indexOf(value);  </div><div class="line">                      </div><div class="line">                    fn(classes, index, value);  </div><div class="line">                    self.className = classes.join(<span class="string">" "</span>);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">              </div><div class="line">            <span class="built_in">return</span> &#123;                      </div><div class="line">                add: update(<span class="keyword">function</span>(classes, index, value) &#123;  </div><div class="line">                    <span class="keyword">if</span> (!~index) classes.push(value);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                remove: update(<span class="keyword">function</span>(classes, index) &#123;  </div><div class="line">                    <span class="keyword">if</span> (~index) classes.splice(index, 1);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                toggle: update(<span class="keyword">function</span>(classes, index, value) &#123;  </div><div class="line">                    <span class="keyword">if</span> (~index)  </div><div class="line">                        classes.splice(index, 1);  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        classes.push(value);  </div><div class="line">                &#125;),  </div><div class="line">                  </div><div class="line">                contains: <span class="keyword">function</span>(value) &#123;  </div><div class="line">                    <span class="built_in">return</span> !!~self.className.split(/\s+/g).indexOf(value);  </div><div class="line">                &#125;,  </div><div class="line">                  </div><div class="line">                item: <span class="keyword">function</span>(i) &#123;  </div><div class="line">                    <span class="built_in">return</span> self.className.split(/\s+/g)[i] || null;  </div><div class="line">                &#125;  </div><div class="line">            &#125;;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>dataset ie9及以下不兼容 </p></li></ol><p>elem.getAttribute(‘data-index’);</p><ol><li>ie9不支持transition </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;总结一下ie兼容性问题&quot;&gt;&lt;a href=&quot;#总结一下ie兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;总结一下ie兼容性问题&quot;&gt;&lt;/a&gt;总结一下ie兼容性问题&lt;/h3&gt;&lt;h4 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="ie" scheme="http://yoursite.com/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="http://yoursite.com/2018/03/19/http/"/>
    <id>http://yoursite.com/2018/03/19/http/</id>
    <published>2018-03-19T12:22:51.000Z</published>
    <updated>2018-03-25T18:49:03.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><p>简单快速，灵活，无连接，无状态</p><p>简单快速: 只需传送请求方法和路径。<br>灵活: HTTP允许传输任意类型的数据对象。<br>无连接: 每次连接只处理一个请求。<br>无状态: HTTP协议是无状态协议，无状态是指对于事物处理没有记忆能力。</p><h4 id="请求消息-Request"><a href="#请求消息-Request" class="headerlink" title="请求消息 Request"></a>请求消息 Request</h4><p>请求行 请求头 空行 请求体</p><h4 id="响应消息-Response"><a href="#响应消息-Response" class="headerlink" title="响应消息 Response"></a>响应消息 Response</h4><p>状态行 响应头 空行 响应体</p><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><p>GET,POST,PUT,DELETE,HEAD</p><p>get与post区别</p><p>get浏览器后退是无害的，POST会再次提交请求<br>get产生的url可以被浏览器收藏，post不可以<br>get参数数据体积小1kb,post数据体积大2M<br>get参数会携带url中，post不会<br>安全性 post请求比get请求安全</p><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><p>1xx 请求已被接收，继续处理<br>200 请求成功<br>3xx 重定向<br>301 永久重定向<br>302 临时重定向<br>303 临时重定向，指定GET方法<br>304 服务器数据没变 ，重定向到请求缓存<br>4xx 服务器错误<br>5xx 客户端错误</p><h4 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h4><p>(输入url获取页面的过程)</p><p>浏览器根据DNS服务器获得ip地址<br>向这个IP地址发送HTTP请求<br>服务器收到处理并返回HTTP请求<br>浏览器得到返回内容</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><pre><code>1. https协议需要到CA申请证书，要交费2. http协议运行在TCP之上，所以传输的内容都是明文   HTTPS运行在ssl/TLS之上，SSL/TLS运行在TCP之上，所传输的内容都是经过加密的3. HTTP 80端口 HTTPS 443端口4. HTTPS可以解决运营商劫持问题</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h3&gt;&lt;h4 id=&quot;主要特点&quot;&gt;&lt;a href=&quot;#主要特点&quot; class=&quot;headerlink&quot; title=&quot;主要特点&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>automation</title>
    <link href="http://yoursite.com/2018/03/09/automation/"/>
    <id>http://yoursite.com/2018/03/09/automation/</id>
    <published>2018-03-09T06:42:03.000Z</published>
    <updated>2018-03-09T17:14:20.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端自动化构建工具"><a href="#前端自动化构建工具" class="headerlink" title="前端自动化构建工具"></a>前端自动化构建工具</h3><h4 id="gulp-grunt-webpack"><a href="#gulp-grunt-webpack" class="headerlink" title="gulp grunt webpack"></a>gulp grunt webpack</h4><h4 id="gulp-grunt-与-webpack-的区别"><a href="#gulp-grunt-与-webpack-的区别" class="headerlink" title="gulp/grunt 与 webpack 的区别"></a>gulp/grunt 与 webpack 的区别</h4><pre><code>都是前端自动化构建工具gulp/grunt 是一种能够优化前端的开发流程的工具。webpack是一种模块化的解决方案。</code></pre><h4 id="为什么使用webpack？"><a href="#为什么使用webpack？" class="headerlink" title="为什么使用webpack？"></a>为什么使用webpack？</h4><pre><code>1. 模块化 把复杂的程序化为小的文件2. 转译 es6等浏览器不能直接使用js的特性 3. scss ,less 等css预处理器。</code></pre><h4 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h4><pre><code>css css-loader =&gt; 处理css文件style-loader =&gt; 将css-loader处理后的文件作为样式标签&lt;style&gt;插入到html文件中</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端自动化构建工具&quot;&gt;&lt;a href=&quot;#前端自动化构建工具&quot; class=&quot;headerlink&quot; title=&quot;前端自动化构建工具&quot;&gt;&lt;/a&gt;前端自动化构建工具&lt;/h3&gt;&lt;h4 id=&quot;gulp-grunt-webpack&quot;&gt;&lt;a href=&quot;#gulp-gr
      
    
    </summary>
    
    
      <category term="automation" scheme="http://yoursite.com/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="http://yoursite.com/2018/03/08/xss/"/>
    <id>http://yoursite.com/2018/03/08/xss/</id>
    <published>2018-03-08T10:21:10.000Z</published>
    <updated>2018-03-08T11:41:23.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><pre><code>XSS 跨站脚本攻击(Cross Site Scripting)</code></pre><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><pre><code>反射型 存储型反射型 发出请求时，xss代码出现在url中，作为输入提交到服务器，服务器端解析后响应，xss代码随相应内容一起传回给浏览器。存储型 提交的代码会存储在服务器端( 数据库，内存，文件系统等)，下次请求目标页面时不用提交XSS代码</code></pre><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h4><pre><code>编码 过滤 校正编码  html Entity 对字符转义过滤 (最重要)    移除用户上传的DOM属性，eg:onerror onclick     移除用户上传的Style Script Iframe节点等    校正    避免直接对html entity解码    使用DOM Parse转换，校正不配对的DOM标签。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;XSS 跨站脚本攻击(Cross Site Scripting)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;攻击方式
      
    
    </summary>
    
    
      <category term="safe" scheme="http://yoursite.com/tags/safe/"/>
    
  </entry>
  
  <entry>
    <title>css_layout</title>
    <link href="http://yoursite.com/2018/03/08/css-layout/"/>
    <id>http://yoursite.com/2018/03/08/css-layout/</id>
    <published>2018-03-07T16:11:08.000Z</published>
    <updated>2018-03-25T18:51:30.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><a id="more"></a><h4 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h4><h5 id="左侧固定右侧自适应"><a href="#左侧固定右侧自适应" class="headerlink" title="左侧固定右侧自适应"></a>左侧固定右侧自适应</h5><pre><code>1. 左浮动/左absolute，右overflow:hidden;2. 左浮动/左absolute，右margin-left: left_width; // =&gt; 右侧固定左侧自适应，就不行了3. 左浮动/左absolute，右absolute4. display:flex; 左width:width;右flex:1; table</code></pre><h4 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h4><pre><code>1. </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Layout&quot;&gt;&lt;a href=&quot;#Layout&quot; class=&quot;headerlink&quot; title=&quot;Layout&quot;&gt;&lt;/a&gt;Layout&lt;/h3&gt;
    
    </summary>
    
    
      <category term="layout" scheme="http://yoursite.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>mvvm</title>
    <link href="http://yoursite.com/2018/03/07/mvvm/"/>
    <id>http://yoursite.com/2018/03/07/mvvm/</id>
    <published>2018-03-07T10:11:10.000Z</published>
    <updated>2018-03-21T10:47:22.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mvvm-框架"><a href="#mvvm-框架" class="headerlink" title="mvvm 框架"></a>mvvm 框架</h3><h4 id="1-了解"><a href="#1-了解" class="headerlink" title="1.了解"></a>1.了解</h4><p>Vue React Angular</p><p>MVC Model View Controller<br>MVVM Model View ViewModel</p><p>mvvm定位 Model &lt;=&gt; ViewModel &lt;=&gt; View Model 与 View 是分离的</p><h5 id="MVC-与-MVVM-区别"><a href="#MVC-与-MVVM-区别" class="headerlink" title="MVC 与 MVVM 区别"></a>MVC 与 MVVM 区别</h5><p>  在MVC里，View是可以直接访问Model的。Model不依赖View,而View依赖于Model。更改view更难。<br>  在MVVM里， View(页面)与Model(数据)是分离的。</p><h4 id="2-双向绑定的原理"><a href="#2-双向绑定的原理" class="headerlink" title="2.双向绑定的原理"></a>2.双向绑定的原理</h4><ol><li>data=&gt;view data改变会使view变化<br>view=&gt;data view变化也会改变data<br>绑定 =&gt; 自动化处理，不需要人为关心。</li><li><p>原理<br> data =&gt; view Object.defineProperty get/set操作 依靠它 监听data的变化<br> view =&gt; data input事件，只不过框架执行了我们看不到。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; &#125;;</div><div class="line">      // 为obj定义一个名为 hello 的访问器属性</div><div class="line">      Object.defineProperty(obj, <span class="string">"hello"</span>, &#123;</div><div class="line">        get: <span class="function"><span class="title">function</span></span> () &#123;<span class="built_in">return</span> sth&#125;,</div><div class="line">        <span class="built_in">set</span>: <span class="keyword">function</span> (val) &#123;/* <span class="keyword">do</span> sth */&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> object.defineProperty 与 reflect.defineProperty 区别</p><pre><code>object.defineProperty 返回的是一个对象reflect.defineProperty 返回Boolean值作为成功的状态</code></pre><p> object.defineProperty 还可以用来 深度复制<br> let desc = Object.getOwnPropertyDescriptor(source,key);<br> Object.defineProperty(target,key,desc);</p></li></ol><h4 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h4><pre><code>观察者模式 data =&gt; Observer Dep Watcher =&gt; View</code></pre><h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h4><h5 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h5><pre><code>beforeCreate  =&gt; el与data并未初始化        =&gt; 可以在这加loading事件。created          =&gt; 完成了data数据的初始化。  =&gt; 做一些初始化，实现函数自执行。beforeMount   =&gt; 完成了el和data初始化mounted          =&gt; 完成挂载                   =&gt; 向后端发起请求，那回数据，配合路由钩子做事beforeDestorydestoryed                                   =&gt; 当前组件已被删除，清空相关内容。beforeUpdateupdated</code></pre><h5 id="React"><a href="#React" class="headerlink" title="React"></a>React</h5><pre><code>static defaultPropsconstructor            =&gt; 接收父组件的props，contextcomponentWillMount        =&gt; 组件刚经历constructor,初始完数据 组件还未render，dom未渲染rendercomponentDidMount      =&gt; 组件第一次渲染完成，此时dom节点已经生成，可以调用ajax,返回数据setState后组件会重新渲染componentWillUnmount   =&gt; clear 组件中的定时器 setTimeout，setInterval，移除组件监听。componentWillReceivePropsshouldCompoentUpdatecomponentWillUpdaterendercomponentDidUpdate</code></pre><h4 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h4><h5 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import VRouter from <span class="string">'vue-router'</span>;</div><div class="line">app.use(VRouter);</div><div class="line"><span class="built_in">let</span> router = new VueRouter(&#123;</div><div class="line">mode: <span class="string">'history'</span>,</div><div class="line">routes: [</div><div class="line">  &#123;path:<span class="string">'/'</span>,component: IndexPage&#125;,</div><div class="line">  &#123;path:<span class="string">'/detail'</span>,component: DetailPage,redirect:<span class="string">'/detail/analysis'</span>,</div><div class="line">    children: [</div><div class="line">      &#123;path:<span class="string">'forecast'</span>,component: ForPage&#125;,</div><div class="line">      &#123;path:<span class="string">'analysis'</span>,component: AnaPage&#125;,</div><div class="line">      &#123;path:<span class="string">'count'</span>,component: CouPage&#125;,</div><div class="line">      &#123;path:<span class="string">'publish'</span>,component: PubPage&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">new vue(&#123;router&#125;)</div></pre></td></tr></table></figure><pre><code>vue 比 react 多了一个 router-view<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;keep-alive&gt;</div><div class="line">  &lt;router-view :seller=<span class="string">"seller"</span>&gt;&lt;/router-view&gt;</div><div class="line">&lt;/keep-alive&gt;</div></pre></td></tr></table></figure>keep-alive 作用把切换出去的组件保存到内存中，保留它的状态或避免重复渲染。</code></pre><h6 id="链接-重定向"><a href="#链接-重定向" class="headerlink" title="链接(重定向)"></a>链接(重定向)</h6><p>router-link</p><ol><li><router-link to="/good"></router-link></li><li><router-link :to="{name:'banana',params:{color:'yellow'}}"></router-link></li><li><router-link to="/good" tag="li"></router-link> 就变成li标签了</li></ol><h5 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123;Route,BrowserRouter,Switch,HashRouter&#125; from <span class="string">'react-router-dom'</span>;</div><div class="line"></div><div class="line">&lt;HashRouter&gt;</div><div class="line">&lt;Switch&gt;</div><div class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;PCIndex&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;Route path=<span class="string">"/details/:uniquekey"</span> component=&#123;PCNewsDetails&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;PCUserCenter&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div><div class="line">&lt;/HashRouter&gt;</div></pre></td></tr></table></figure><h6 id="链接-重定向-1"><a href="#链接-重定向-1" class="headerlink" title="链接(重定向)"></a>链接(重定向)</h6><p>import {Link} from ‘react-router-dom’;</p><link to="/list">我的私人音乐坊 &qt;<h4 id="6-params"><a href="#6-params" class="headerlink" title="6. params"></a>6. params</h4><h5 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h5><pre><code>获取params =&gt; this.$route.params</code></pre><h5 id="react"><a href="#react" class="headerlink" title="react"></a>react</h5><pre><code>获取params =&gt; this.props.params</code></pre><h4 id="7-获取DOM"><a href="#7-获取DOM" class="headerlink" title="7. 获取DOM"></a>7. 获取DOM</h4><p>1.vue=&gt; this.$ref.name<br>2.react =&gt; this.ref.name</p><h4 id="8-数据请求"><a href="#8-数据请求" class="headerlink" title="8. 数据请求"></a>8. 数据请求</h4><h5 id="vue-1"><a href="#vue-1" class="headerlink" title="vue"></a>vue</h5><h6 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h6><pre><code>import VueResource from &apos;vue-resource&apos;;app.use(VueResource);this.$http.get(&apos;/goods/list&apos;)    .then((response) =&gt; {        response = response.body;            if (response.status === &apos;0&apos;) {                 this.goods = response.result.list;                       this.$nextTick(() =&gt; {                     this._initScroll();                     this._calculateHeight();                });            }    });    跨域：代理 proxyTable</code></pre><h6 id="axios-gt-vue2-0以后用axios"><a href="#axios-gt-vue2-0以后用axios" class="headerlink" title="axios =&gt; vue2.0以后用axios"></a>axios =&gt; vue2.0以后用axios</h6><pre><code>import axios from &apos;axios&apos;;axios.get(&apos;/users/addressList&apos;).then((response)=&gt;{        var res = response.data;        this.addressList = res.result;        this.addressList.forEach((item,index)=&gt;{           if(item.isDefault){             this.currentIndex = index;             this.selectedAddressId = item.addressId;           }        })      })跨域跨域post实例，用到了qs组件来避开ajax信使请求，并兼容Android。import axios from &apos;axios&apos;;import qs from &apos;qs&apos;;axios.post(&apos;http://www.xyz.com/request&apos;, qs.stringify(params)).then(response =&gt; {  console.log(response);}).catch(err =&gt; {  console.log(err);});</code></pre><h5 id="react-gt-fetch"><a href="#react-gt-fetch" class="headerlink" title="react =&gt; fetch"></a>react =&gt; fetch</h5><pre><code>var myFetchOptions = {    method: &apos;GET&apos;};fetch(&quot;http://newsapi.gugujiankong.com/Handler.ashx?action=uc&amp;userid=&quot; + localStorage.React_userid + &quot;&amp;uniquekey=&quot; + this.props.uniquekey, myFetchOptions).then(response=&gt;response.json()).then(json=&gt;{    //收藏成功以后进行一下全局的提醒    notification[&apos;success&apos;]({message:&apos;ReactNews提醒&apos;,description:&apos;收藏此文章成功&apos;});})fetch 跨域 =&gt; 数据模拟我选择代理方式proxy || fetch-jsonp 插件实现jsonp&quot;proxy&quot;: {  &quot;/api&quot;: {    &quot;target&quot;: &quot;http://localhost:4000&quot;,    &quot;secure&quot;: false  },  &quot;/tuan&quot;: {    &quot;target&quot;: &quot;http://m.dianping.com&quot;,    &quot;secure&quot;: false  }}</code></pre><h4 id="9-组件间数据传递"><a href="#9-组件间数据传递" class="headerlink" title="9. 组件间数据传递"></a>9. 组件间数据传递</h4><h5 id="vue-2"><a href="#vue-2" class="headerlink" title="vue"></a>vue</h5><h6 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h6><p>父 =&gt; 子</p><pre><code>父组件中&lt;food :food=&quot;selectedFood&quot;&gt;&lt;/food&gt;子组件接收    props:{        food:{            type:Object        }    }子组件使用数据方式 this.food (即与data中数据使用方式相同)</code></pre><p>子 =&gt; 父</p><pre><code>this.$emit(&apos;add&apos;,target/msg) =&gt; 触发父组件中add事件，执行add绑定的函数。</code></pre><h6 id="子组件之间数据传递-eventBus-or-vuex全局"><a href="#子组件之间数据传递-eventBus-or-vuex全局" class="headerlink" title="子组件之间数据传递  eventBus or vuex全局"></a>子组件之间数据传递  eventBus or vuex全局</h6><pre><code> evetnBus功能:实现组件间通信，点击外部关闭select=&gt;同一时间最多有一个select处于下拉状态建立eventBus.js  import Vue from &apos;vue&apos;  const eventBus = new Vue()  export { eventBus }全局组件中定义click事件   resetComponent() { eventBus.$emit(&apos;reset-component&apos;) }具有select的组件中触发eventBus   mounted () {       eventBus.$on(&apos;reset-component&apos;, () =&gt; {         this.isDrop = false       })       // 每一个select组件 只要触发reset-component 就会使this.isDrop重置  }  toggleDrop(e) {    e.stopPropagation()  //注意要阻止冒泡    eventBus.$emit(&apos;reset-component&apos;)  //多个select 点击别的select也触发事件    this.isDrop = !this.isDrop   }vuex</code></pre><p>核心 State Getter Mutation Action Module</p><p>actions(commit) =&gt; mutations(同步函数) =&gt; state(改变state) =&gt; components(自动更新componets)</p><pre><code>1.import Vuex from &apos;vuex&apos;;2. Vue.use(Vuex);3. const store = new Vuex.Store({    state:{        userName:&apos;&apos;,        cartCount:0    },    mutations:{        updateUserInfo(state,userName){            state.userName = userName;        },        updateCartCount(state,cartCount){            state.cartCount += cartCount;        },        initCartCount(state,cartCount){            state.cartCount = cartCount;        }    }})4.new Vue({store});const store = new Vuex.Store({    state:{        userName:&apos;&apos;,        cartCount:0    },    mutations:{        updateUserInfo(state,userName){            state.userName = userName;        },        updateCartCount(state,cartCount){            state.cartCount += cartCount;        },        initCartCount(state,cartCount){            state.cartCount = cartCount;        }    }})&lt;!-- 在各个组件中都可以使用 this.$store.commit(mutations中的方法) 来更新components --&gt;this.$store.commit(&quot;updateCartCount&quot;,-1);Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：       应用层级的状态应该集中到单个 store 对象中。       提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。       异步逻辑都应该封装到 action 里面。State  作为一个“唯一数据源 (SSOT)”而存在       从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：       computed: {           count () {             return store.state.count           }       }        mapState: mapGetters...同理         import { mapState } from &apos;vuex&apos;         ...mapState(...)  Getter  有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：        const store = new Vuex.Store({          state: {            todos: [              { id: 1, text: &apos;...&apos;, done: true },              { id: 2, text: &apos;...&apos;, done: false }            ]          },          getters: {            doneTodos: state =&gt; {              return state.todos.filter(todo =&gt; todo.done)            }          }        })Mutation 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。         触发 store.commit(&apos;increment&apos;)         注意事项           最好提前在你的 store 中初始化好所有所需属性。           当需要在对象上添加新属性时，你应该           使用 Vue.set(obj, &apos;newProp&apos;, 123), 或者           以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：           state.obj = { ...state.obj, newProp: 123 }           一条重要的原则就是要记住 mutation 必须是同步函数Action    Action 类似于 mutation，不同在于：            Action 提交的是 mutation，而不是直接变更状态。            Action 可以包含任意异步操作。          Action 通过 store.commit 方法触发：            store.commit(&apos;increment&apos;)</code></pre><h5 id="react-1"><a href="#react-1" class="headerlink" title="react"></a>react</h5><h6 id="父子组件数据传递"><a href="#父子组件数据传递" class="headerlink" title="父子组件数据传递"></a>父子组件数据传递</h6><ol><li>父 =&gt; 子 通过props传递</li></ol><p>父组件 <food food="this.state.selectedFood"></food><br>子组件接收 this.props.food </p><p><em>vue 与 react 数据使用格式区别</em><br>vue<br>1.html中=&gt;直接使用 data/porps中数据名称。<br>2.js中=&gt; this.数据名称<br>react<br>1.html/js中 =&gt; this.props.数据名称/this.state.数据名称</p><ol><li>子 =&gt; 父 通过函数 父组件中函数传递给子组件，子组件中返回数据给父组件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">子组件 progress组件中:</div><div class="line">   changeProgress(e)&#123;</div><div class="line">    <span class="built_in">let</span> progressBar = this.refs.progressBar;</div><div class="line">    <span class="built_in">let</span> progress = (e.clientX - progressBar.getBoundingClientRect().left) /progressBar.clientWidth;</div><div class="line">    this.props.onProgressChange &amp;&amp; this.props.onProgressChange(progress);</div><div class="line">   &#125;</div><div class="line">   &lt;div className=<span class="string">"components-progress"</span> ref=<span class="string">"progressBar"</span> onClick=&#123;this.changeProgress.bind(this)&#125;&gt;</div><div class="line">父组件 player组件中:</div><div class="line">  progressChangeHandler(progress) &#123;</div><div class="line">    $(<span class="string">'#player'</span>).jPlayer(this.state.isPlay?<span class="string">'play'</span>:<span class="string">'pause'</span>, duration*progress);</div><div class="line">  &#125;</div><div class="line">  &lt;Progress progress=&#123;this.state.progress&#125; onProgressChange=&#123;this.progressChangeHandler.bind(this)&#125; /&gt;</div></pre></td></tr></table></figure><ol><li>子组件间通信</li></ol><p>1.子 =&gt; 父 =&gt; 子</p><p>子组件传给父组件 父组件根据子组件数据改变state, state改变重新render下面的子组件<br>由于 Parent 的 state 发生变化，会触发 Parent 及从属于 Parent 的子组件的生命周期，所以我们在控制台中可以看到，在各个组件中的 componentDidUpdate 方法均被触发。所以有别的就用别的。</p><p>2.eventProxy</p><p>eventProxy 中，总共有 on、one、off、trigger 这 4 个函数：</p><p>on、one：on 与 one 函数用于订阅者监听相应的事件，并将事件响应时的函数作为参数，on 与 one 的唯一区别就是，使用 one 进行订阅的函数，只会触发一次，而 使用 on 进行订阅的函数，每次事件发生相应时都会被触发。<br>trigger：trigger 用于发布者发布事件，将除第一参数（事件名）的其他参数，作为新的参数，触发使用 one 与 on 进行订阅的函数。<br>off：用于解除所有订阅了某个事件的所有函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="string">'use strict'</span>;</div><div class="line">const eventProxy = &#123;</div><div class="line">  onObj: &#123;&#125;,</div><div class="line">  oneObj: &#123;&#125;,</div><div class="line">  on: <span class="keyword">function</span>(key, fn) &#123;</div><div class="line">    <span class="keyword">if</span>(this.onObj[key] === undefined) &#123;</div><div class="line">      this.onObj[key] = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.onObj[key].push(fn);</div><div class="line">  &#125;,</div><div class="line">  one: <span class="keyword">function</span>(key, fn) &#123;</div><div class="line">    <span class="keyword">if</span>(this.oneObj[key] === undefined) &#123;</div><div class="line">      this.oneObj[key] = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.oneObj[key].push(fn);</div><div class="line">  &#125;,</div><div class="line">  off: <span class="keyword">function</span>(key) &#123;</div><div class="line">    this.onObj[key] = [];</div><div class="line">    this.oneObj[key] = [];</div><div class="line">  &#125;,</div><div class="line">  trigger: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">let</span> key, args;</div><div class="line">    <span class="keyword">if</span>(arguments.length == 0) &#123;</div><div class="line">      <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    key = arguments[0];</div><div class="line">    args = [].concat(Array.prototype.slice.call(arguments, 1));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(this.onObj[key] !== undefined</div><div class="line">      &amp;&amp; this.onObj[key].length &gt; 0) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="built_in">let</span> i <span class="keyword">in</span> this.onObj[key]) &#123;</div><div class="line">        this.onObj[key][i].apply(null, args);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(this.oneObj[key] !== undefined</div><div class="line">      &amp;&amp; this.oneObj[key].length &gt; 0) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="built_in">let</span> i <span class="keyword">in</span> this.oneObj[key]) &#123;</div><div class="line">        this.oneObj[key][i].apply(null, args);</div><div class="line">        this.oneObj[key][i] = undefined;</div><div class="line">      &#125;</div><div class="line">      this.oneObj[key] = [];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">export</span> default eventProxy;</div></pre></td></tr></table></figure><p>栗子 =&gt; usercenter页面改变数据 更新header 登录状态;trigger =&gt;触发 on事件</p><p>header =&gt; 注册on事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import eventProxy from <span class="string">'../eventProxy'</span></div><div class="line">eventProxy.on(<span class="string">'hasLogined'</span>, (hasLogined) =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      hasLogined</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>usercenter =&gt; 触发 trigger<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import eventProxy from <span class="string">'../eventProxy'</span></div><div class="line"><span class="function"><span class="title">logout</span></span>()&#123;</div><div class="line">  localStorage.React_userid = <span class="string">''</span>;</div><div class="line">  localStorage.userNickName = <span class="string">''</span>;</div><div class="line">  eventProxy.trigger(<span class="string">'hasLogined'</span>, <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>redux</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore &#125; from <span class="string">'redux'</span>;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class="line"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class="line"> *</div><div class="line"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class="line"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class="line"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class="line"> *</div><div class="line"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class="line"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class="line"> */</div><div class="line"><span class="keyword">function</span> counter(state = 0, action) &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</div><div class="line">    <span class="built_in">return</span> state + 1;</div><div class="line">  <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</div><div class="line">    <span class="built_in">return</span> state - 1;</div><div class="line">  default:</div><div class="line">    <span class="built_in">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 创建 Redux store 来存放应用的状态。</div><div class="line">// API 是 &#123; subscribe, dispatch, getState &#125;。</div><div class="line"><span class="built_in">let</span> store = createStore(counter);</div><div class="line"></div><div class="line">// 可以手动订阅更新，也可以事件绑定到视图层。</div><div class="line">store.subscribe(() =&gt;</div><div class="line">  console.log(store.getState())</div><div class="line">);</div><div class="line"></div><div class="line">// 改变内部 state 惟一方法是 dispatch 一个 action。</div><div class="line">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'INCREMENT'</span> &#125;);</div><div class="line">// 1</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'INCREMENT'</span> &#125;);</div><div class="line">// 2</div><div class="line">store.dispatch(&#123; <span class="built_in">type</span>: <span class="string">'DECREMENT'</span> &#125;);</div><div class="line">// 1</div></pre></td></tr></table></figure><p>Provider connect</p><p>Provider 内的组件要必须被 connect 过的</p><p>connect =&gt; mapStateToProps(state,ownProps)/mapDispatchToProps(dispatch,ownProps)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mvvm-框架&quot;&gt;&lt;a href=&quot;#mvvm-框架&quot; class=&quot;headerlink&quot; title=&quot;mvvm 框架&quot;&gt;&lt;/a&gt;mvvm 框架&lt;/h3&gt;&lt;h4 id=&quot;1-了解&quot;&gt;&lt;a href=&quot;#1-了解&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="mvvm" scheme="http://yoursite.com/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>react_props</title>
    <link href="http://yoursite.com/2018/03/01/react-props/"/>
    <id>http://yoursite.com/2018/03/01/react-props/</id>
    <published>2018-03-01T02:20:14.000Z</published>
    <updated>2018-03-01T04:47:44.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-props"><a href="#react-props" class="headerlink" title="react props"></a>react props</h3><h4 id="this-props-children-React-Children"><a href="#this-props-children-React-Children" class="headerlink" title="this.props.children/React.Children"></a>this.props.children/React.Children</h4><pre><code>this.props.children 表示组件的所有子节点</code></pre><h4 id="this-props-children-与-React-Children-区别"><a href="#this-props-children-与-React-Children-区别" class="headerlink" title="this.props.children 与 React.Children 区别"></a>this.props.children 与 React.Children 区别</h4><pre><code>1.函数作为child传递    this.props.children.map is not a function    React.Children.map 不会报错2.count=&gt;获取子组件个数    this.props.children.length 不可行    React.Children.count(this.props.children) =&gt; 返回子组件个数3. React.Children.toArray4. 执行单一child    React.children.only(this.props.children)    只能在传递单一child的情况下使用，而且child必须为函数。5. React.cloneElement        renderChildren() {          return React.Children.map(this.props.children, child =&gt; {            return React.cloneElement(child, {              name: this.props.name            })          })        }</code></pre><h4 id="属性传递"><a href="#属性传递" class="headerlink" title="属性传递"></a>属性传递</h4><pre><code>属性不能跨层传递,也不能反向传递所以 传递单个的props多次，很麻烦也不容易改动{...this.props} =&gt; 获取父组件的props 传给 子组件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-props&quot;&gt;&lt;a href=&quot;#react-props&quot; class=&quot;headerlink&quot; title=&quot;react props&quot;&gt;&lt;/a&gt;react props&lt;/h3&gt;&lt;h4 id=&quot;this-props-children-React-Chi
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-router</title>
    <link href="http://yoursite.com/2018/02/28/react-router/"/>
    <id>http://yoursite.com/2018/02/28/react-router/</id>
    <published>2018-02-27T17:55:30.000Z</published>
    <updated>2018-03-25T18:47:30.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123;  hashHistory  ,Router, Route, IndexRoute,Link &#125; from <span class="string">'react-router'</span></div><div class="line">&lt;Router <span class="built_in">history</span>=&#123;hashHistory&#125;&gt; //<span class="built_in">hash</span></div><div class="line">     &lt;Route path=<span class="string">'/'</span> component=&#123;App&#125;&gt;</div><div class="line">       &lt;IndexRoute component=&#123;Player&#125; /&gt;</div><div class="line">       &lt;Route path=<span class="string">'/list'</span> component=&#123;Musiclist&#125;&gt;&lt;/Route&gt;</div><div class="line">     &lt;/Route&gt;</div><div class="line">   &lt;/Router&gt;</div></pre></td></tr></table></figure><p>参数传递 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">'/list/:id'</span> component=&#123;Musiclist&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure><p>   引用： this.props.params.id</p><p>Link链接跳转:</p><pre><code>&lt;Link to=&apos;/list&apos;&gt;我的私人音乐坊 &amp;qt;&lt;/Link&gt;</code></pre><h3 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &#123;Route,BrowserRouter,Switch,HashRouter&#125; from <span class="string">'react-router-dom'</span>;</div><div class="line">&lt;HashRouter&gt;</div><div class="line">  &lt;Switch&gt;</div><div class="line">    &lt;Route exact path=<span class="string">"/"</span> component=&#123;MobileIndex&#125;&gt;&lt;/Route&gt;</div><div class="line">    &lt;Route path=<span class="string">"/details/:uniquekey"</span> component=&#123;MobileNewsDetails&#125;&gt;&lt;/Route&gt;</div><div class="line">    &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;mobileUserCenter&#125;&gt;&lt;/Route&gt;</div><div class="line">  &lt;/Switch&gt;</div><div class="line">&lt;/HashRouter&gt;</div></pre></td></tr></table></figure><p>react-router与react-router-dom<br>没什么大区别,后者更适合移动端,喜欢哪个都可以。</p><p>React Router for WEB，一般我们前端就用这个包来进行WEB开发了，提供包括上述react-router相关的组件和方法以外还有如下接口：<br>BrowserRouter HashRouter Link NavLink</p><h4 id="BrowserRouter-HashRouter"><a href="#BrowserRouter-HashRouter" class="headerlink" title="BrowserRouter HashRouter"></a>BrowserRouter HashRouter</h4><ol><li>HashRouter 跳转相同路由(不同query/hash)的url,会报错。</li></ol><h4 id="页面刷新"><a href="#页面刷新" class="headerlink" title="页面刷新"></a>页面刷新</h4><pre><code>Update(){  Component.forceUpdate();}onClick={this.Update.bind(this)}</code></pre><h4 id="返回-上一级"><a href="#返回-上一级" class="headerlink" title="返回 上一级"></a>返回 上一级</h4><pre><code>back(){  window.history.back();}</code></pre><h4 id="锚点跳转"><a href="#锚点跳转" class="headerlink" title="锚点跳转"></a>锚点跳转</h4><pre><code>scrollToAnchor = (anchorName) =&gt; {    if (anchorName) {        let anchorElement = document.getElementById(anchorName.Item);        if(anchorElement) { anchorElement.scrollIntoView(); }    }}onClick={()=&gt;this.scrollToAnchor({id})}</code></pre><h4 id="页面跳转-滚动条问题"><a href="#页面跳转-滚动条问题" class="headerlink" title="页面跳转 滚动条问题"></a>页面跳转 滚动条问题</h4><pre><code>window.scrollTo(0,0)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-router&quot;&gt;&lt;a href=&quot;#react-router&quot; class=&quot;headerlink&quot; title=&quot;react-router&quot;&gt;&lt;/a&gt;react-router&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>match</title>
    <link href="http://yoursite.com/2018/02/27/match/"/>
    <id>http://yoursite.com/2018/02/27/match/</id>
    <published>2018-02-26T16:54:37.000Z</published>
    <updated>2018-02-26T18:21:59.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><h4 id="获取search中的key值"><a href="#获取search中的key值" class="headerlink" title="获取search中的key值"></a>获取search中的key值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> GetQueryString(key)&#123;</div><div class="line">var reg = new RegExp(<span class="string">"(/\?|&amp;)"</span>+ key + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</div><div class="line">&lt;!-- var search  = window.location.search.match(reg); --&gt;</div><div class="line">var search  = reg.exec(window.location.search); <span class="built_in">exec</span>与match相反</div><div class="line"><span class="keyword">if</span>(search != null) <span class="built_in">return</span> unescape(search[2]);<span class="built_in">return</span> null; // unescape 与 .json()相似</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><pre><code>返回值返回匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。总结：就是0: 匹配的是reg,及全部的内容1: 第一个 ()匹配子项的内容 N: 第N个 ()匹配子项的内容整个正则表达式匹配的字符串括号匹配的子串，每一对括号对应一个子串</code></pre><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><pre><code>str = &quot;12324&quot;str.match(/\d+/)[ &apos;12324&apos;]str = &quot;12324&quot;str.match(/(\d+)/)[ &apos;12324&apos;, &apos;12324&apos;]str = &quot;123abc&quot; str.match(/\d+[a-z]+/)[ &apos;1232abc&apos;]str = &quot;1232abc&quot;str.match(/(\d+)([a-z]+)/)[ &apos;1232abc&apos;, &apos;1232&apos;, &apos;abc&apos;]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;match&quot;&gt;&lt;a href=&quot;#match&quot; class=&quot;headerlink&quot; title=&quot;match&quot;&gt;&lt;/a&gt;match&lt;/h3&gt;&lt;h4 id=&quot;获取search中的key值&quot;&gt;&lt;a href=&quot;#获取search中的key值&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="RegExp" scheme="http://yoursite.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>fetch</title>
    <link href="http://yoursite.com/2018/02/25/fetch/"/>
    <id>http://yoursite.com/2018/02/25/fetch/</id>
    <published>2018-02-24T17:50:57.000Z</published>
    <updated>2018-03-25T18:49:50.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/url/'</span>,&#123;method:<span class="string">'GET'</span>&#125;)</div><div class="line">.<span class="keyword">then</span>(response =&gt; response.json())</div><div class="line">.<span class="keyword">then</span>(json =&gt; this.setState(&#123;data:json&#125;))</div></pre></td></tr></table></figure><h4 id="poiyfill"><a href="#poiyfill" class="headerlink" title="poiyfill"></a>poiyfill</h4><pre><code>fetch是基于Promise设计的，所以不兼容 IE8及以下可以下载 isomorphic-fetch和whatwg-fetch</code></pre><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><pre><code>fetch不支持jsonp可以用 fetch-jsonp npm install fetch-jsonp --save-devfetchJsonp(&apos;/users.jsonp&apos;, {    timeout: 3000,    jsonpCallback: &apos;custom_callback&apos;  })  .then(function(response) {    return response.json()  }).catch(function(ex) {    console.log(&apos;parsing failed&apos;, ex)  })</code></pre><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><pre><code>fetch的mode有3个值same=&gt;该模式是不允许跨域的，它需要遵守同源策略，否则浏览器会返回一个error告知不能跨域；其对应的response type为basic。cors: 该模式支持跨域请求，顾名思义它是以CORS的形式跨域；当然该模式也可以同域请求不需要后端额外的CORS支持；其对应的response type为cors。no-cors: 该模式用于跨域请求但是服务器不带CORS响应头，也就是服务端不支持CORS；这也是fetch的特殊跨域请求方式；其对应的response type为opaque。 // 后台可以看到数据，但是访问不到内容 =&gt; 该模式允许浏览器发送本次跨域请求，但是不能访问响应返回的内容，这也是其response type为opaque透明的原因。</code></pre><h5 id="proxy-重定向"><a href="#proxy-重定向" class="headerlink" title="proxy 重定向"></a>proxy 重定向</h5><pre><code>可以 在package.json里添加&quot;proxy&quot;: {  &quot;/api&quot;: {    &quot;target&quot;: &quot;http://localhost:4000&quot;,    &quot;secure&quot;: false  }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink&quot; title=&quot;fetch&quot;&gt;&lt;/a&gt;fetch&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="fetch" scheme="http://yoursite.com/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>regExp</title>
    <link href="http://yoursite.com/2018/02/22/regExp/"/>
    <id>http://yoursite.com/2018/02/22/regExp/</id>
    <published>2018-02-22T04:56:53.000Z</published>
    <updated>2018-03-19T10:20:41.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><pre><code>g/i/m/y/ug =&gt; 全局查找 从上一次匹配的位置继续寻找直到找到匹配的位置开始，不一定是第一个就匹配上i =&gt; 大小写不敏感m =&gt; 检测字符串中的换行符y =&gt; es6 全局查找 但是 必须是匹配成后紧跟着的第一个字符就要匹配成功才算u =&gt;  用来处理Unicode字符的 大于两个字符(0xffff) .不匹配/量词(大于0xffff)/u{61}(这种Unicode字符)</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h5><pre><code>compile =&gt; 编译正则表达式exec =&gt; 搜索字符串中指定的值。返回找到的值，并确定其位置test =&gt; 搜索字符串中指定的值。返回true或false</code></pre><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><pre><code>search =&gt; 搜索与正则表达式相匹配的值，stringObject 中第一个与 regexp 相匹配的子串的起始位置。注释：如果没有找到任何匹配的子串，则返回 -1。match =&gt; 找到一个或者多个正则表达式的匹配。 返回的是匹配的值，没有 为 nullreplace =&gt; 替换与正则表达式匹配的子串。split =&gt; string ==&gt; []</code></pre><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><pre><code>w =&gt; 查找字符单词  W =&gt; 查找非单词字符d =&gt; 查找数字      D =&gt; 查找非数字字符s =&gt; 查找空白字符  S =&gt; 查找非空白字符b =&gt; 匹配单词边界  B =&gt; 匹配非单词边界[] =&gt; 用于查找某个范围内的字符{} =&gt; 量词^ =&gt; 字符串的开始位置$ =&gt; 字符串的结束位置* =&gt; {0,}+ =&gt; {1,}? =&gt; {0,1}</code></pre><h4 id="用到过的正则例子"><a href="#用到过的正则例子" class="headerlink" title="用到过的正则例子"></a>用到过的正则例子</h4><pre><code>1. 邮箱验证 xx@xx.com/cn;var s = &apos;1205562160@qq.com&apos;;var reg = new RegExp(/\d{5,11}@\w{2,3}\.com|cn/);reg.test(s);2. trimfunction trim(s){    return s.replace(/(^\s*)|(\s*$)/g,&apos;&apos;);}3. 去掉重复的字符串var str = &apos;aaabccddde&apos;;str = str.replace(/(.)\1+/g,&apos;$1&apos;);4. 验证注册名称 字母开头，后面数字、字符串、下划线，长度为9-20；var s = &apos;a2323_wewwe&apos;;var reg = new RegExp(/^[a-zA-Z][\w]{8-19}$/,&apos;g&apos;);reg.test(s);5. 数字每三位数添加逗号var num = 1233445454.12;num.toString().replace(/(\d)(?=(\d{3})+\.)/g,function($2){    return $2+&apos;,&apos;;})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;h4 id=&quot;修饰符&quot;&gt;&lt;a href=&quot;#修饰符&quot; class=&quot;headerlink&quot; title=&quot;修饰符&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="regexp" scheme="http://yoursite.com/tags/regexp/"/>
    
  </entry>
  
  <entry>
    <title>gulp</title>
    <link href="http://yoursite.com/2018/02/21/gulp/"/>
    <id>http://yoursite.com/2018/02/21/gulp/</id>
    <published>2018-02-21T07:16:58.000Z</published>
    <updated>2018-03-04T07:13:08.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><pre><code>gulp中使用的是node的stream（流），是以stream为媒介先读取需要的stream，通过stream的pipe()方法导入到想要的地方，比如插件等，经过插件处理过的流可以继续导入到其他地方，包括写入到文件中</code></pre><h4 id="最简-gulp"><a href="#最简-gulp" class="headerlink" title="最简 gulp"></a>最简 gulp</h4><pre><code>&lt;!-- build:css css/combined.css --&gt;&lt;!-- endbuild --&gt;&lt;!-- build:js js/combined.js --&gt;&lt;!-- endbuild --&gt;</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var gulp = require(<span class="string">'gulp'</span>);</div><div class="line">var rev = require(<span class="string">'gulp-rev'</span>);</div><div class="line">var revReplace = require(<span class="string">'gulp-rev-Replace'</span>);</div><div class="line">var useref = require(<span class="string">'gulp-useref'</span>);</div><div class="line">var filter = require(<span class="string">'gulp-filter'</span>);</div><div class="line">var uglify = require(<span class="string">'gulp-uglify'</span>);</div><div class="line">var csso = require(<span class="string">'gulp-csso'</span>);</div><div class="line"></div><div class="line">var imagemin = require(<span class="string">'gulp-imagemin'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var jsFilter = filter(<span class="string">'**/*.js'</span>,&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line">var cssFilter = filter(<span class="string">'**/*.css'</span>,&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line">var indexHtmlFilter = filter([<span class="string">'**/*'</span>,<span class="string">'!**/index.html'</span>],&#123;restore: <span class="literal">true</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">return</span> gulp.src(<span class="string">'src/index.html'</span>)</div><div class="line">.pipe(useref())</div><div class="line">.pipe(jsFilter)</div><div class="line">.pipe(uglify())</div><div class="line">.pipe(jsFilter.restore)</div><div class="line">.pipe(cssFilter)</div><div class="line">.pipe(csso())</div><div class="line">.pipe(cssFilter.restore)</div><div class="line">.pipe(indexHtmlFilter)</div><div class="line">.pipe(rev())</div><div class="line">.pipe(indexHtmlFilter.restore)</div><div class="line">.pipe(revReplace())</div><div class="line">.pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 压缩图片任务</div><div class="line">// 在命令行输入 gulp images 启动此任务</div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">// 1. 找到图片</div><div class="line">gulp.src(<span class="string">'src/img/*.*'</span>)</div><div class="line">// 2. 压缩图片</div><div class="line">.pipe(imagemin(&#123;</div><div class="line">progressive: <span class="literal">true</span></div><div class="line">&#125;))</div><div class="line">// 3. 另存图片</div><div class="line">.pipe(gulp.dest(<span class="string">'dist/img'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gulp&quot;&gt;&lt;a href=&quot;#gulp&quot; class=&quot;headerlink&quot; title=&quot;gulp&quot;&gt;&lt;/a&gt;gulp&lt;/h3&gt;&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h
      
    
    </summary>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>es6</title>
    <link href="http://yoursite.com/2018/02/21/es6/"/>
    <id>http://yoursite.com/2018/02/21/es6/</id>
    <published>2018-02-20T18:05:51.000Z</published>
    <updated>2018-03-25T18:50:33.575Z</updated>
    
    <content type="html"><![CDATA[<p>搭建环境 // ok<br>写页面   // ok<br>js       // </p><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><p>es6 默认就是 严格模式 ‘use strict’</p><h4 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h4><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><p>{} 内的变量只有在{}内部才有效,且不能重复声明</p><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>const 声明值类型 只读,引用类型可变,且必须赋值</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值：左边一种结构，右边一种结构，一一对应赋值</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>数组解构赋值 对象解构赋值 字符串解构赋值 布尔值解构赋值 函数参数解构赋值 数组解构赋值</p><h6 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h6><ol><li>支持默认值 // [a,b=3];</li><li>…只能用在最后一个参数，表示 其他的元素组成一个数组</li><li>，表示空缺的元素</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="built_in">let</span> a,b,rest;</div><div class="line">[a,b] = [1,2] //1,2</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> a,b,rest;</div><div class="line">  [a,b,...rest]=[1,2,3,4,5,6];</div><div class="line">  console.log(a,b,rest); // 1,2,[3,4,5,6]</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> a,b,c,rest;</div><div class="line">  [a,b,c=3]=[1,2];</div><div class="line">  console.log(a,b,c); // 1,2,3</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> a=1;</div><div class="line">  <span class="built_in">let</span> b=2;</div><div class="line">  [a,b]=[b,a];</div><div class="line">  console.log(a,b); // 2,1 =&gt;数值交换</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> [1,2]</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">let</span> a,b;</div><div class="line">  [a,b]=f();</div><div class="line">  console.log(a,b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> a,b;</div><div class="line">  (&#123;a,b&#125;=&#123;a:1,b:2&#125;)</div><div class="line">  console.log(a,b); //1,2</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> [1,2]</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">let</span> a,b;</div><div class="line">  [a,b]=f();</div><div class="line">  console.log(a,b); //1,2</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> &#123;a=10,b=5&#125;=&#123;a:3&#125;;</div><div class="line">  console.log(a,b); //3,5</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> metaData=&#123;</div><div class="line">    title:<span class="string">'abc'</span>,</div><div class="line">    <span class="built_in">test</span>:[&#123;</div><div class="line">      title:<span class="string">'test'</span>,</div><div class="line">      desc:<span class="string">'description'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">let</span> &#123;title:esTitle,<span class="built_in">test</span>:[&#123;title:cnTitle&#125;]&#125;=metaData;</div><div class="line">  console.log(esTitle,cnTitle); // <span class="string">'abc'</span>,<span class="built_in">test</span></div></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="修饰符-i"><a href="#修饰符-i" class="headerlink" title="修饰符 i"></a>修饰符 i</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> regex3 = new RegExp(/abc/ig, <span class="string">'i'</span>);</div><div class="line">console.log(regex3.flags); // i</div></pre></td></tr></table></figure><h5 id="修饰符-g-y"><a href="#修饰符-g-y" class="headerlink" title="修饰符 g/y"></a>修饰符 g/y</h5><pre><code>g =&gt; 全局查找 从上一次匹配的位置继续寻找直到找到匹配的位置开始，不一定是第一个就匹配上y =&gt; 全局查找 但是 必须是匹配成后紧跟着的第一个字符就要匹配成功才算</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    // y修饰符</div><div class="line">    <span class="built_in">let</span> s = <span class="string">'bbbb_bbb_bb_b'</span>;</div><div class="line">    var a1 = /b+/g;</div><div class="line">    var a2 = /b+/y;</div><div class="line"></div><div class="line">    console.log(a1.exec(s), a2.exec(s)); // [<span class="string">"bbbb"</span>],[<span class="string">"bbbb"</span>]</div><div class="line">    console.log(a1.exec(s), a2.exec(s)); // [<span class="string">"bbb"</span>],null</div><div class="line"></div><div class="line">    console.log(a1.sticky, a2.sticky); //表示是否开启了粘连模式  <span class="literal">false</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="修饰符-u"><a href="#修饰符-u" class="headerlink" title="修饰符 u"></a>修饰符 u</h5><pre><code>1. Unicode字符 要加上 u 才可以识别2. . 不能识别 大于 0xffff(即两个字符)的Unicode 字符,必须加上 u 修饰3. 量词大于 0xffff 要用 u 修饰</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    console.log(<span class="string">'u修饰符'</span>,/^\uD83D/.<span class="built_in">test</span>(<span class="string">'\uD83D\uDC2A'</span>)); // <span class="literal">true</span></div><div class="line">    console.log(<span class="string">'u修饰符'</span>,/^\uD83D/u.test(<span class="string">'\uD83D\uDC2A'</span>)); // <span class="literal">false</span></div><div class="line">    // 大括号表示Unicode字符，只有加上u才能识别</div><div class="line">    console.log(/\u&#123;61&#125;/.<span class="built_in">test</span>(<span class="string">'a'</span>)); // <span class="literal">false</span></div><div class="line">    console.log(/\u&#123;61&#125;/u.test(<span class="string">'a'</span>)); // <span class="literal">true</span></div><div class="line">    console.log(/\u&#123;20BB7&#125;/u.test(<span class="string">'𠮷'</span>)); // <span class="literal">true</span></div><div class="line">    // 点（.）字符不能识别码点大于0xFFFF(两个字符)的Unicode字符，必须加上u修饰符。</div><div class="line">    <span class="built_in">let</span> s = <span class="string">'𠮷'</span>;</div><div class="line">    console.log(<span class="string">'大于0xFFFF的Unicode字符'</span>,/^.$/.<span class="built_in">test</span>(s)); // <span class="literal">false</span></div><div class="line">    console.log(<span class="string">'使用u字符'</span>,/^.$/u.test(s)); // <span class="literal">true</span></div><div class="line"></div><div class="line">    // 使用u修饰符后，所有量词都会正确识别大于码点大于0xFFFF的Unicode字符。</div><div class="line">    console.log(<span class="string">'量词'</span>,/a&#123;2&#125;/.<span class="built_in">test</span>(<span class="string">'aa'</span>)); // <span class="literal">true</span></div><div class="line">    console.log(<span class="string">'量词'</span>,/a&#123;2&#125;/u.test(<span class="string">'aa'</span>)); // <span class="literal">true</span></div><div class="line">    console.log(<span class="string">'量词'</span>,/𠮷&#123;2&#125;/.<span class="built_in">test</span>(<span class="string">'𠮷𠮷'</span>)); // <span class="literal">false</span></div><div class="line">    console.log(<span class="string">'量词'</span>,/𠮷&#123;2&#125;/u.test(<span class="string">'𠮷𠮷'</span>)); // <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ol><li><p>大于0xffff 要用{}</p><p> {<br>   console.log(‘a’,<code>\u0061</code>);    //a<br>   console.log(‘s’,<code>\u20BB7</code>);   // ₻7<br>   console.log(‘s’,<code>\u{20BB7}</code>); //𠮷<br> }</p></li><li><p>codePointAt</p><p> {<br>   let s=’𠮷’;<br>   console.log(‘length’,s.length);<br>   console.log(‘0’,s.charAt(0));<br>   console.log(‘1’,s.charAt(1));<br>   console.log(‘at0’,s.charCodeAt(0));<br>   console.log(‘at1’,s.charCodeAt(1));</p><p>   let s1=’𠮷a’;<br>   console.log(‘length’,s1.length);                     // 3<br>   console.log(‘code0’,s1.codePointAt(0));              // 134071 =&gt; 全部的Unicode(占4个字符)<br>   console.log(‘code0’,s1.codePointAt(0).toString(16)); //20bb7<br>   console.log(‘code1’,s1.codePointAt(1));<br>   console.log(‘code2’,s1.codePointAt(2));<br> }</p></li><li><p>fromCodePoint 可以超过 0xffff fromCharCode 不能</p><p> {<br>   console.log(String.fromCharCode(“0x20bb7”));   // ஷ<br>   console.log(String.fromCodePoint(“0x20bb7”));  // 𠮷<br> }</p></li><li><p>let of</p><p> {<br>   let str=’\u{20bb7}abc’;<br>   for(let i=0;i&lt;str.length;i++){</p><pre><code>console.log(&apos;es5&apos;,str[i]); // � � a b c</code></pre><p>   }<br>   for(let code of str){</p><pre><code>console.log(&apos;es6&apos;,code); // 𠮷 a b c </code></pre><p>   }<br> }</p></li><li><p>包含 头部 尾部 重复</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> str=<span class="string">"string"</span>;</div><div class="line">  console.log(<span class="string">'includes'</span>,str.includes(<span class="string">"c"</span>));  // <span class="literal">false</span></div><div class="line">  console.log(<span class="string">'start'</span>,str.startsWith(<span class="string">'str'</span>)); // <span class="literal">true</span></div><div class="line">  console.log(<span class="string">'end'</span>,str.endsWith(<span class="string">'ng'</span>));      // <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> str=<span class="string">"abc"</span>;</div><div class="line">  console.log(str.repeat(2)); // abcabc</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>拼接 </p><p> {<br>   let name=”list”;<br>   let info=”hello world”;<br>   let m=<code>i am ${name},${info}</code>;<br>   console.log(m);  // i am list,hello world<br> }</p></li><li><p>补充</p><p> {<br>   console.log(‘1’.padStart(2,’0’)); // 01<br>   console.log(‘1’.padEnd(2,’0’));   // 10<br> }</p></li><li><p>String.raw 不换行 与 。。。</p><p> {<br>   let user={</p><pre><code>name:&apos;list&apos;,info:&apos;hello world&apos;</code></pre><p>   };<br>   console.log(abc<code>i am ${user.name},${user.info}</code>);<br>   function abc(s,v1,v2){</p><pre><code>console.log(s,v1,v2);return s+v1+v2</code></pre><p>   }<br> }</p><p> {<br>   console.log(String.raw<code>Hi\n${1+2}</code>); // 不换行<br>   console.log(<code>Hi\n${1+2}</code>);<br> }</p></li></ol><h4 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h4><pre><code>ob/oB =&gt; 二进制开头Oo    =&gt; 八进制开头Number.isFinite 判断又穷Number.isNaN 判断是否为数Number.isInteger 判断是否为整数Number.isSafeInteger 判断是否安全Math.trunc 只取整数部分(Math.floor 向下取整,负数时有区别)   Math.sign 判断是否为整数 -1,0,1,NaNMath.cbrt 立方根</code></pre><h4 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h4><pre><code>Array.of() 转成数组Array.from() 将nodeList 转成数组[].fill(content,start,end) 前闭后开[].copyWithin(target,start,end)前闭后开[].find 返回第一个符合条件的value[].findIndex 返回第一个符合条件的Index[].includes(content) 是否包含content   for(let index of [&apos;1&apos;,&apos;c&apos;,&apos;ks&apos;].keys()){    console.log(&apos;keys&apos;,index); // 0,1,2  }  for(let value of [&apos;1&apos;,&apos;c&apos;,&apos;ks&apos;].values()){    console.log(&apos;values&apos;,value); // 1,c,ks  }  for(let [index,value] of [&apos;1&apos;,&apos;c&apos;,&apos;ks&apos;].entries()){    console.log(&apos;values&apos;,index,value); // 0,1 1,c 2 ks  }</code></pre><h4 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h4><pre><code>默认值 设置默认值的参数后面参数不能没有默认值...arg 扩展参数...[1,2,3] 展开数组箭头函数 let arrow = v =&gt; v*2; 伪调用 提升性能 代替递归</code></pre><h4 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h4><pre><code>简洁表示法 let o=1;let es6={o}; es6=&gt; {o:1}属性表达式 let a =&apos;b&apos;;let es6 = {[a]:&apos;c&apos;}; es6=&gt;{b:&apos;c&apos;}Object.is(a,b) a===bObject.assign{({},{....}} 浅拷贝Object.entries 同 Array.entries扩展运算符let {a,b,...c}={a:&apos;test&apos;,b:&apos;kill&apos;,c:&apos;ddd&apos;,d:&apos;ccc&apos;};</code></pre><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><pre><code>1.声明唯一变量2.Symbol.for() 不唯一3.Symbol.for()可以与{}中的属性重复  let a1=Symbol.for(&apos;abc&apos;);  let obj={    [a1]:&apos;123&apos;,    &apos;abc&apos;:345,    &apos;c&apos;:456  };  console.log(&apos;obj&apos;,obj);  // {abc: 345, c: 456, Symbol(abc): &quot;123&quot;}4. 怎样查找带有Symbol项的obj      for(let [key,value] of Object.entries(obj)){        console.log(&apos;let of&apos;,key,value);      }      Object.getOwnPropertySymbols(obj).forEach(function(item){        console.log(obj[item]);      })      Reflect.ownKeys(obj).forEach(function(item){        console.log(&apos;ownkeys&apos;,item,obj[item]);      })</code></pre><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><pre><code>Set WeakSet Map WeakMap</code></pre><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><pre><code>类似数组 但是 成员的值都是唯一的，没有重复。可以用来 去重，但是类型不同不会去重。  // 去除数组的重复成员  [...new Set(array)]长度 .size方法 add delete clear has 获取值 .keys .values .entries .forEachnew Set(content) content 必须为数组或类数组</code></pre><h5 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h5><pre><code>weakSet的元素只能是对象,对象是弱引用，引用地址。不会检测这个对象是否在其他地方用过。因此WeakSet是不可遍历的</code></pre><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><pre><code>值-值 的对应 各种类型的值(包括对象)都可以当做键Map.set() Map.get()方法 add delete clear has </code></pre><h4 id="set-map-array-obj-增删改查"><a href="#set-map-array-obj-增删改查" class="headerlink" title="set map array obj 增删改查"></a>set map array obj 增删改查</h4><pre><code>let set = new Set();let map = new Map();let arr = [];let obj={};// 增set.add({&apos;t&apos;:1});map.set(&apos;t&apos;,1);arr.push({t:1});obj[&apos;t&apos;]=1;// 删set.forEach(item=&gt;item.t?item.t=2:&apos;&apos;);map.delete(&apos;t&apos;);let index = arr.findIndex(item=&gt;item.t);arr.splice(index,1);delete obj[&apos;t&apos;];// 改map.set(&apos;t&apos;,2);set.forEach(item=&gt;item.t?item.t=2:&apos;&apos;)arr.forEach(item=&gt;item.t?item.t=2:&apos;&apos;);  // .map()也可以obj.t=2;// 查map.has(&apos;t&apos;);set.has(Item);  Item ==&gt; {t:1} 并且一定要 set.add(I)才可以 set.add({t:1})不行arr.find(item=&gt;item.t);&apos;t&apos; in obj</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建环境 // ok&lt;br&gt;写页面   // ok&lt;br&gt;js       // &lt;/p&gt;
&lt;h3 id=&quot;es6&quot;&gt;&lt;a href=&quot;#es6&quot; class=&quot;headerlink&quot; title=&quot;es6&quot;&gt;&lt;/a&gt;es6&lt;/h3&gt;&lt;p&gt;es6 默认就是 严格模式 ‘us
      
    
    </summary>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>mock</title>
    <link href="http://yoursite.com/2018/02/13/mock/"/>
    <id>http://yoursite.com/2018/02/13/mock/</id>
    <published>2018-02-13T09:18:40.000Z</published>
    <updated>2018-03-25T18:46:39.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mock总结"><a href="#mock总结" class="headerlink" title="mock总结"></a>mock总结</h3><h4 id="简单的重定向-proxy"><a href="#简单的重定向-proxy" class="headerlink" title="简单的重定向 proxy"></a>简单的重定向 proxy</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"proxy"</span>: &#123;</div><div class="line">  <span class="string">"/api"</span>: &#123;</div><div class="line">    <span class="string">"target"</span>: <span class="string">"https://localhost:3000/"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mock总结&quot;&gt;&lt;a href=&quot;#mock总结&quot; class=&quot;headerlink&quot; title=&quot;mock总结&quot;&gt;&lt;/a&gt;mock总结&lt;/h3&gt;&lt;h4 id=&quot;简单的重定向-proxy&quot;&gt;&lt;a href=&quot;#简单的重定向-proxy&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="mock" scheme="http://yoursite.com/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>hawk</title>
    <link href="http://yoursite.com/2018/02/06/hawk/"/>
    <id>http://yoursite.com/2018/02/06/hawk/</id>
    <published>2018-02-06T01:41:38.000Z</published>
    <updated>2018-02-06T02:24:33.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hawk"><a href="#hawk" class="headerlink" title="hawk"></a>hawk</h3><p>注：有时候网页采集器中的url获取不到真实数据，就不能抓到数据。</p><h4 id="网页采集器"><a href="#网页采集器" class="headerlink" title="网页采集器"></a>网页采集器</h4><p>搜索字符=&gt;属性名=&gt;手气不错 </p><p>就可以抓到数据，有时候要多试几次。</p><h4 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h4><p>生成区间数=&gt;选择区间(也就是页数)<br>合并多列=&gt;填写输出列的名称=&gt;Format 填写utl(0)。<br>从爬虫转换=&gt;一般不用 填爬虫选择<br>写入数据表=&gt;给数据定义名字<br>数据库操作<br>导出=&gt;串行模式/并行模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hawk&quot;&gt;&lt;a href=&quot;#hawk&quot; class=&quot;headerlink&quot; title=&quot;hawk&quot;&gt;&lt;/a&gt;hawk&lt;/h3&gt;&lt;p&gt;注：有时候网页采集器中的url获取不到真实数据，就不能抓到数据。&lt;/p&gt;
&lt;h4 id=&quot;网页采集器&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dom</title>
    <link href="http://yoursite.com/2018/02/04/Dom/"/>
    <id>http://yoursite.com/2018/02/04/Dom/</id>
    <published>2018-02-04T07:42:47.000Z</published>
    <updated>2018-03-25T18:47:38.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dom操作"><a href="#Dom操作" class="headerlink" title="Dom操作"></a>Dom操作</h3><h4 id="上下遍历"><a href="#上下遍历" class="headerlink" title="上下遍历"></a>上下遍历</h4><p>Node.parentNode,Node.childNodes,Node.firstChild,Node.lastNode.</p><h4 id="左右遍历"><a href="#左右遍历" class="headerlink" title="左右遍历"></a>左右遍历</h4><p>Node.previousSibling,Node.nextSibling.</p><h4 id="Node操作"><a href="#Node操作" class="headerlink" title="Node操作"></a>Node操作</h4><p>添加 Node.appendChild()<br>删除 Node.removeChild()<br>复制 Node.clone(boolean) =&gt;true 深度克隆 false 只克隆标签<br>创建 document.createElement()<br>选择 =&gt;document.getElementById(),getElementsByClassName(),getElementsByTagName(),querySelector</p><h5 id="getElement-s-By…与querySelector的区别"><a href="#getElement-s-By…与querySelector的区别" class="headerlink" title="getElement(s)By…与querySelector的区别"></a>getElement(s)By…与querySelector的区别</h5><p>1.性能：getElement(s)By…的性能要比querySelector快很多。<br>2.querySelector选择出来的是静态的，getElement选出来的是动态的=&gt;比如动态生成的元素可以用querySelector给每一个该对象生成方法。(新建文件夹)</p><h4 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h4><p>elem.className<br>elem.classList=&gt;add(class),remove(class),contains(class),item(index),toggle(class,boolean)。</p><h4 id="document-fragments"><a href="#document-fragments" class="headerlink" title="document fragments"></a>document fragments</h4><p>dom批量操作要用createDocumentFragment()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var docFragment = document.createDocumentFragment();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (var i = counts; i &gt; 0; i--) &#123;</div><div class="line">    var node = document.createElement(<span class="string">'p'</span>);</div><div class="line">    var node_text = document.createTextNode(i + <span class="string">', hehe'</span>);</div><div class="line"></div><div class="line">    node.appendChild(node_text);</div><div class="line"></div><div class="line">    docFragment.appendChild(node);</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.body.appendChild(docFragment);</div></pre></td></tr></table></figure><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>也可以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var d= document.createElement(<span class="string">'div'</span>);</div><div class="line">var html=<span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (var i = counts; i &gt; 0; i--) &#123;</div><div class="line">html += <span class="string">'&lt;p&gt;i+'</span> hehe<span class="string">'&lt;/p&gt;'</span>;</div><div class="line">&#125;</div><div class="line">d.innerHTMl = html;</div><div class="line">document.body.appendChild(d);</div></pre></td></tr></table></figure></p><p>总结：innerHTML与createDocumentFragment 都比createElement和append占优势，少量数据时innerHTml最优，多数据或者改数据createDocumentFragment最优</p><p>但是innerHTML还有两个缺点：</p><p>1.如果你在原来的子元素上绑定了事件的话，重写后事件绑定仍然还在<br>2.js代码和html代码耦合程度高，不利于维护</p><h5 id="innertext-gt-不包括标签"><a href="#innertext-gt-不包括标签" class="headerlink" title="innertext =&gt; 不包括标签"></a>innertext =&gt; 不包括标签</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dom操作&quot;&gt;&lt;a href=&quot;#Dom操作&quot; class=&quot;headerlink&quot; title=&quot;Dom操作&quot;&gt;&lt;/a&gt;Dom操作&lt;/h3&gt;&lt;h4 id=&quot;上下遍历&quot;&gt;&lt;a href=&quot;#上下遍历&quot; class=&quot;headerlink&quot; title=&quot;上下遍历&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>context</title>
    <link href="http://yoursite.com/2018/02/04/context/"/>
    <id>http://yoursite.com/2018/02/04/context/</id>
    <published>2018-02-04T02:21:28.000Z</published>
    <updated>2018-03-25T18:51:06.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="context执行上下文"><a href="#context执行上下文" class="headerlink" title="context执行上下文"></a>context执行上下文</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>当前代码的运行环境或者作用域</p><p>js中代码的运行环境分为以下三种：</p><pre><code>全局级别的代码-这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。函数级别的代码-当执行一个函数时，运行函数体中的代码Eval的代码-在Eval函数内运行的代码。</code></pre><h4 id="执行上下文堆栈"><a href="#执行上下文堆栈" class="headerlink" title="执行上下文堆栈"></a>执行上下文堆栈</h4><p>在浏览器中，js引擎的工作方式是单线程的。也就是说，某一时刻只有唯一的一个事件是被激活处理的，其他的事件被放入队列中，等待被处理。</p><p><img src="/images/Curcontext.jpg" alt="img"> </p><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span> foo(i) &#123;</div><div class="line">           <span class="keyword">if</span> (i === 3) &#123;</div><div class="line">               <span class="built_in">return</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">               foo(++i);</div><div class="line">           &#125;</div><div class="line">       &#125;(0));</div></pre></td></tr></table></figure></p><p><img src="/images/context.gif" alt="img"> </p><p>由此可见 ，对于执行上下文这个抽象的概念，可以归纳为以下几点：</p><p>单线程<br>同步执行<br>唯一的一个全局上下文<br>函数的执行上下文的个数没有限制<br>每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此。</p><h4 id="执行上下文的建立过程"><a href="#执行上下文的建立过程" class="headerlink" title="执行上下文的建立过程"></a>执行上下文的建立过程</h4><p>我们现在已经知道，每当调用一个函数时，一个新的执行上下文就会被创建出来。然而，在javascript引擎内部，这个上下文的创建过程具体分为两个阶段:</p><p>建立阶段(发生在当调用一个函数时，但是在执行函数体内的具体代码以前)<br>    建立变量，函数，arguments对象，参数<br>    建立作用域链<br>    确定this的值<br>代码执行阶段:<br>    变量赋值，函数引用，执行其它代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> foo(i) &#123;</div><div class="line">            var a = <span class="string">'hello'</span>;</div><div class="line">            var b = <span class="keyword">function</span> <span class="function"><span class="title">privateB</span></span>() &#123;</div><div class="line">        </div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">function</span> <span class="function"><span class="title">c</span></span>() &#123;</div><div class="line">        </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        foo(22);</div></pre></td></tr></table></figure><p>建立阶段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">fooExecutionContext = &#123;</div><div class="line">            variableObject: &#123;</div><div class="line">                arguments: &#123;</div><div class="line">                    0: 22,</div><div class="line">                    length: 1</div><div class="line">                &#125;,</div><div class="line">                i: 22,</div><div class="line">                c: pointer to <span class="keyword">function</span> c()</div><div class="line">                a: undefined,</div><div class="line">                b: undefined</div><div class="line">            &#125;,</div><div class="line">            scopeChain: &#123; ... &#125;,</div><div class="line">            this: &#123; ... &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>执行阶段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">fooExecutionContext = &#123;</div><div class="line">            variableObject: &#123;</div><div class="line">                arguments: &#123;</div><div class="line">                    0: 22,</div><div class="line">                    length: 1</div><div class="line">                &#125;,</div><div class="line">                i: 22,</div><div class="line">                c: pointer to <span class="keyword">function</span> c()</div><div class="line">                a: <span class="string">'hello'</span>,</div><div class="line">                b: pointer to <span class="keyword">function</span> privateB()</div><div class="line">            &#125;,</div><div class="line">            scopeChain: &#123; ... &#125;,</div><div class="line">            this: &#123; ... &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>我们看到，只有在代码执行阶段，变量属性才会被赋予具体的值。</p><h4 id="局部变量作用域提升"><a href="#局部变量作用域提升" class="headerlink" title="局部变量作用域提升"></a>局部变量作用域提升</h4><p>在函数中声明的变量以及函数，其作用域提升到函数顶部</p><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">           console.log(typeof foo); // <span class="keyword">function</span> pointer</div><div class="line">           console.log(typeof bar); // undefined</div><div class="line">       </div><div class="line">           var foo = <span class="string">'hello'</span>,</div><div class="line">               bar = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                   <span class="built_in">return</span> <span class="string">'world'</span>;</div><div class="line">               &#125;;</div><div class="line">       </div><div class="line">           <span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>() &#123;</div><div class="line">               <span class="built_in">return</span> <span class="string">'hello'</span>;</div><div class="line">           &#125;</div><div class="line">       </div><div class="line">       &#125;());​</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;context执行上下文&quot;&gt;&lt;a href=&quot;#context执行上下文&quot; class=&quot;headerlink&quot; title=&quot;context执行上下文&quot;&gt;&lt;/a&gt;context执行上下文&lt;/h3&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="http://yoursite.com/2018/02/02/promise/"/>
    <id>http://yoursite.com/2018/02/02/promise/</id>
    <published>2018-02-02T06:33:24.000Z</published>
    <updated>2018-03-17T19:25:37.931Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><pre><code>Promise是一个构造函数。该函数有一个函数参数函数参数有两个参数 resolve reject ,分别为成功与失败之后的回调函数。</code></pre><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</div><div class="line">...</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>1.Promise.all()=&gt;用于汇总多个promise的结果。<br>2.Promise.race()<br>3.Promise.reject(reason)<br>4.Promise.resolve(value)<br>5.Promise.prototype.catch(onRejected)<br>6.Promise.prototype.then(onFulfilled, onRejected)<br>7.Promise.prototype.finally(onFinally)</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>1.一个async函数可以包含一个await表达式，暂停异步函数的执行并等待传入Promise的解析，然后恢复async函数的执行并返回解析后的值。<br>eg:=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> resolveAfter2Seconds(x) &#123;</div><div class="line">  <span class="built_in">return</span> new Promise(resolve =&gt; &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      resolve(x);</div><div class="line">    &#125;, 2000);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">async <span class="keyword">function</span> add1(x) &#123;</div><div class="line">  const a = await resolveAfter2Seconds(20);</div><div class="line">  const b = await resolveAfter2Seconds(30);</div><div class="line">  <span class="built_in">return</span> x + a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add1(10).<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">  console.log(v);  // prints 60 after 4 seconds.</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">async <span class="keyword">function</span> add2(x) &#123;</div><div class="line">  const p_a = resolveAfter2Seconds(20);</div><div class="line">  const p_b = resolveAfter2Seconds(30);</div><div class="line">  <span class="built_in">return</span> x + await p_a + await p_b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add2(10).<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">  console.log(v);  // prints 60 after 2 seconds.</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>2.函数重写承诺链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> getProcessedData(url) &#123;</div><div class="line">  <span class="built_in">return</span> downloadData(url) // returns a promise</div><div class="line">    .catch(e =&gt; &#123;</div><div class="line">      <span class="built_in">return</span> downloadFallbackData(url)  // returns a promise</div><div class="line">    &#125;)</div><div class="line">    .<span class="keyword">then</span>(v =&gt; &#123;</div><div class="line">      <span class="built_in">return</span> processDataInWorker(v); // returns a promise</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">它可以用一个async函数重写，如下所示：</div><div class="line"></div><div class="line">async <span class="keyword">function</span> getProcessedData(url) &#123;</div><div class="line">  <span class="built_in">let</span> v;</div><div class="line">  try &#123;</div><div class="line">    v = await downloadData(url); </div><div class="line">  &#125; catch(e) &#123;</div><div class="line">    v = await downloadFallbackData(url);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">return</span> processDataInWorker(v);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h5><h6 id="用法：Promise-all-迭代"><a href="#用法：Promise-all-迭代" class="headerlink" title="用法：Promise.all(迭代)"></a>用法：Promise.all(迭代)</h6><p>迭代：一个可迭代的对象，如Array或者String.</p><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>　异步性</p><p>1.同步，当且仅当通过的迭代是空的时，Promise.all同步解析<br>2.异步，不然就要异步处理<br>  快速性<br>3.快速行为，如果任何元素被拒绝，则Promise.all被拒绝。</p><p>eg：1&amp;2=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var p = Promise.all([]); // will be immediately resolved</div><div class="line">var p2 = Promise.all([1337, <span class="string">"hi"</span>]); // non-promise values will be ignored, but the evaluation will be <span class="keyword">done</span> asynchronously</div><div class="line">console.log(p);</div><div class="line">console.log(p2)</div><div class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'the stack is now empty'</span>);</div><div class="line">    console.log(p2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logs</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: Array[0] &#125;</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125;</div><div class="line">// the stack is now empty</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: Array[2] &#125;</div></pre></td></tr></table></figure></p><p>eg:3=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise((resolve, reject) =&gt; &#123; </div><div class="line">  setTimeout(resolve, 1000, <span class="string">'one'</span>); </div><div class="line">&#125;); </div><div class="line">var p2 = new Promise((resolve, reject) =&gt; &#123; </div><div class="line">  setTimeout(resolve, 2000, <span class="string">'two'</span>); </div><div class="line">&#125;);</div><div class="line">var p3 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  setTimeout(resolve, 3000, <span class="string">'three'</span>);</div><div class="line">&#125;);</div><div class="line">var p4 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  setTimeout(resolve, 4000, <span class="string">'four'</span>);</div><div class="line">&#125;);</div><div class="line">var p5 = new Promise((resolve, reject) =&gt; &#123;</div><div class="line">  reject(<span class="string">'reject'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Promise.all([p1, p2, p3, p4, p5]).<span class="keyword">then</span>(values =&gt; &#123; </div><div class="line">  console.log(values);</div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  console.log(reason)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//From console:</div><div class="line">//<span class="string">"reject"</span></div><div class="line"></div><div class="line">//You can also use .catch</div><div class="line">Promise.all([p1, p2, p3, p4, p5]).<span class="keyword">then</span>(values =&gt; &#123; </div><div class="line">  console.log(values);</div><div class="line">&#125;).catch(reason =&gt; &#123; </div><div class="line">  console.log(reason)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//From console: </div><div class="line">//<span class="string">"reject"</span></div></pre></td></tr></table></figure></p><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h5><h6 id="用法-Promise-race-迭代"><a href="#用法-Promise-race-迭代" class="headerlink" title="用法 Promise.race(迭代)"></a>用法 Promise.race(迭代)</h6><p>1.如果通过的迭代是空的，则返回的promise将永远等待。<br>2.如果迭代包含一个或多个非承诺值和/或已经解决/拒绝的承诺，Promise.race 则将解析为在迭代中找到的这些值中的第一个。<br>3.也有异步性<br>eg:2=&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var foreverPendingPromise = Promise.race([]);</div><div class="line">var alreadyResolvedProm = Promise.resolve(666);</div><div class="line"></div><div class="line">var arr = [foreverPendingPromise, alreadyResolvedProm, <span class="string">"non-Promise value"</span>];</div><div class="line">var arr2 = [foreverPendingPromise, <span class="string">"non-Promise value"</span>, Promise.resolve(666)];</div><div class="line">var p = Promise.race(arr);</div><div class="line">var p2 = Promise.race(arr2);</div><div class="line"></div><div class="line">console.log(p);</div><div class="line">console.log(p2);</div><div class="line">setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'the stack is now empty'</span>);</div><div class="line">    console.log(p);</div><div class="line">    console.log(p2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// logs, <span class="keyword">in</span> order:</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125; </div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"pending"</span> &#125; </div><div class="line">// the stack is now empty</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: 666 &#125;</div><div class="line">// Promise &#123; &lt;state&gt;: <span class="string">"fulfilled"</span>, &lt;value&gt;: <span class="string">"non-Promise value"</span> &#125;</div></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </div><div class="line">    setTimeout(resolve, 500, <span class="string">'one'</span>); </div><div class="line">&#125;);</div><div class="line">var p2 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123; </div><div class="line">    setTimeout(resolve, 100, <span class="string">'two'</span>); </div><div class="line">&#125;);</div><div class="line"></div><div class="line">Promise.race([p1, p2]).<span class="keyword">then</span>(<span class="keyword">function</span>(value) &#123;</div><div class="line">  console.log(value); // <span class="string">"two"</span></div><div class="line">  // Both resolve, but p2 is faster</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;Promise是一个构造函数。
该函数有一个函数参数
函数参数有两个参数 resolve reject ,分别为成功与失败之
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>different</title>
    <link href="http://yoursite.com/2017/12/12/different/"/>
    <id>http://yoursite.com/2017/12/12/different/</id>
    <published>2017-12-11T18:40:09.000Z</published>
    <updated>2018-03-16T09:25:17.417Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mouseover与mouseenter"><a href="#mouseover与mouseenter" class="headerlink" title="mouseover与mouseenter"></a>mouseover与mouseenter</h4><pre><code>mouseover 支持冒泡事件，鼠标移入到子元素也触发mouseover事件。mouseenter 不支持冒泡事件，鼠标移入到子元素不触发mouseenter事件。</code></pre><h4 id="b与strong，i与em"><a href="#b与strong，i与em" class="headerlink" title="b与strong，i与em"></a>b与strong，i与em</h4><p>strong表示强调，有语气加强的含义，使用阅读设备阅读时会重度<br>b则是展示强调内容</p><p>i为斜体，em表示强调的文本。 </p><h4 id="target-currentTarget"><a href="#target-currentTarget" class="headerlink" title="target,currentTarget"></a>target,currentTarget</h4><pre><code>e.target 指向触发事件监听的对象。e.currentTarget 指向添加监听事件的对象。ul.addEventListener(&apos;click&apos;,function(e){   let oLi1 = e.target     let oLi2 = e.currentTarget    console.log(oLi1)   //  被点击的li    console.log(oLi2)   // ul    console.og(oLi1===oLi2)  // false})在jQuery提供的on方法中，e.currentTarget与该方法接收的第二个参数有关$(this.play_el).on(&apos;click&apos;, &apos;li&apos;, self.changePlayNav.bind(self));changePlayNav(e){    let self = this;    let $cur = $(e.currentTarget); // li    console.log($(e.target));    console.log($cur,333);}</code></pre><h4 id="toLowerCase-toLocaleLowerCase"><a href="#toLowerCase-toLocaleLowerCase" class="headerlink" title="toLowerCase() toLocaleLowerCase()"></a>toLowerCase() toLocaleLowerCase()</h4><pre><code>后者针对 地区,用后者更严谨一些</code></pre><h4 id="link与-import-区别"><a href="#link与-import-区别" class="headerlink" title="link与@import 区别"></a>link与@import 区别</h4><pre><code>1. link是html标签，@import是css提供的2. link在浏览器加载同时加载，@import 在浏览器加载完成后加载3. link无兼容性问题，@import要css2.1以上才兼容4. link权重大于@import</code></pre><h4 id="ajax中-GET与POST区别"><a href="#ajax中-GET与POST区别" class="headerlink" title="ajax中 GET与POST区别"></a>ajax中 GET与POST区别</h4><pre><code>1. get 参数提交到url中，而post不会提交到url中。2. get请求发送的数据小 1kb,而post发送的数据大2M。3. get请求需要注意缓存的问题，post不用担心。4. get请求数据会被浏览器缓存起来，(有安全问题)，POST可以避免。</code></pre><h4 id="split与join区别"><a href="#split与join区别" class="headerlink" title="split与join区别"></a>split与join区别</h4><pre><code>split 将字符串分割成数组join  将数组组合成字符串</code></pre><h4 id="cookies-sessionStorage和localStorage-区别"><a href="#cookies-sessionStorage和localStorage-区别" class="headerlink" title="cookies,sessionStorage和localStorage 区别"></a>cookies,sessionStorage和localStorage 区别</h4><pre><code>1. cookies内存小4kb,localStorage内存大5M.2. cookies有时间限制，localStorage长期存储，sessionStorage关闭窗口清除3. cookies的api 封装困难。localStorage的api封装简单。</code></pre><h4 id="块级元素与行内元素的区别"><a href="#块级元素与行内元素的区别" class="headerlink" title="块级元素与行内元素的区别"></a>块级元素与行内元素的区别</h4><pre><code>行内元素:不单独成一行，不能设置宽高，padding/margin不能设置top/bottom块级元素:单独成一行，可以设置宽高，padding/margin都可用。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mouseover与mouseenter&quot;&gt;&lt;a href=&quot;#mouseover与mouseenter&quot; class=&quot;headerlink&quot; title=&quot;mouseover与mouseenter&quot;&gt;&lt;/a&gt;mouseover与mouseenter&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
